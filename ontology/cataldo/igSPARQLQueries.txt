


# Returns every capability, their requirements and what ISOs and GDPR articles are involved.

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX igonto: <http://www.semanticweb.org/IG/Governance#>

SELECT ?maturityLevel ?capability ?description 
       (GROUP_CONCAT(DISTINCT REPLACE(STR(?objectType), "http://www.semanticweb.org/IG/Governance#", "") ; SEPARATOR=", ") AS ?technicalRequirement)
       (GROUP_CONCAT(DISTINCT REPLACE(STR(?ISO), "http://www.semanticweb.org/IG/Governance#", "") ; SEPARATOR=", ") AS ?ISOs)
       (GROUP_CONCAT(DISTINCT REPLACE(STR(?articles), "http://www.semanticweb.org/IG/Governance#", "") ; SEPARATOR=", ") AS ?GDPR_Articles)
       ?framework ?process 
       ?comment
WHERE {
  ?annotation rdf:type owl:Axiom;
              owl:annotatedSource ?capability;
              owl:annotatedProperty igonto:needsTechnicalRequirement ;
              owl:annotatedTarget ?object;
              rdfs:comment ?comment.
  OPTIONAL { ?capability igonto:hasGoal ?goal }.
  ?capability igonto:linkedToFramework ?framework.
  OPTIONAL { ?capability igonto:linkedToProcess ?process }.
  ?capability igonto:capabilityDescription ?description.
  ?capability igonto:inMaturityLevel ?maturityLevel.
  OPTIONAL { ?object a ?objectType }.
  OPTIONAL { ?object igonto:involvesArticle ?articles }.
  OPTIONAL { ?object igonto:practicesDefinedInIso ?ISO }.
  FILTER (?objectType != owl:NamedIndividual)
}
GROUP BY ?maturityLevel ?capability ?framework ?process ?description ?comment



PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix dc: <http://purl.org/dc/elements/1.1/> 
prefix gr: <http://purl.org/goodrelations/v1#>
prefix dct: <http://purl.org/dc/terms/> 
prefix org: <http://www.w3.org/ns/org#> 
prefix owl: <http://www.w3.org/2002/07/owl#> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix xml: <http://www.w3.org/XML/1998/namespace> 
prefix xsd: <http://www.w3.org/2001/XMLSchema#> 
prefix dcat: <http://www.w3.org/ns/dcat#> 
prefix foaf: <http://xmlns.com/foaf/0.1/> 
prefix prov: <http://www.w3.org/ns/prov#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix skos: <http://www.w3.org/2004/02/skos/core#> 
prefix swrl: <http://www.w3.org/2003/11/swrl#> 
prefix swrlb: <http://www.w3.org/2003/11/swrlb#> 
prefix vcard: <http://www.w3.org/2006/vcard/ns#> 
prefix dctype: <http://purl.org/dc/dcmitype/> 
prefix cmns-av: <https://www.omg.org/spec/Commons/AnnotationVocabulary/> 
prefix owlTime: <http://www.w3.org/2006/time#> 
prefix cmns-cls: <https://www.omg.org/spec/Commons/Classifiers/> 
prefix igso-arc: <http://www.example.org/cm/igso/2023/igso-arc#> 
prefix igso-ass: <http://www.example.org/cm/igso/2023/igso-ass#>
prefix igso-ddy: <http://www.example.org/cm/igso/2023/igso-ddy#> 
prefix igso-jur: <http://www.example.org/cm/igso/2023/igso-jur#> 
prefix igso-org: <http://www.example.org/cm/igso/2023/igso-org#> 
prefix igso-plt: <http://www.example.org/cm/igso/2023/igso-plt#> 
prefix igso-req: <http://www.example.org/cm/igso/2023/igso-req#> 
prefix igso-svc: <http://www.example.org/cm/igso/2023/igso-svc#> 
prefix igso-sys: <http://www.example.org/cm/igso/2023/igso-sys#> 
prefix igso-data: <http://www.example.org/cm/igso/2023/igso-data#> 
prefix igso-impl: <http://www.example.org/cm/igso/2023/igso-impl#> 
prefix igso-stds: <http://www.example.org/cm/igso/2023/igso-stds#>


SELECT ?x (STR(?lab) AS ?label) WHERE {
	?x rdf:type owl:Class .
	OPTIONAL {?x rdfs:label ?lab}
}
ORDER BY ?label  

 
SELECT DISTINCT ?type
WHERE {
  ?subject a ?type.
 FILTER( STRSTARTS(STR(?type),str(igso-org:)) )
}

 
SELECT DISTINCT ?subject ?label ?supertype
WHERE {
    { ?subject a owl:Class . } UNION { ?individual a ?subject . } .
    OPTIONAL { ?subject rdfs:subClassOf ?supertype } .
    OPTIONAL { ?subject rdfs:label ?label }
} ORDER BY ?subject

SELECT DISTINCT ?subject ?label ?supertype
WHERE {
    { ?subject a owl:Class . } UNION { ?individual a ?subject . } .
    OPTIONAL { ?subject rdfs:subClassOf ?supertype } .
    OPTIONAL { ?subject rdfs:label ?label }.
    FILTER (?subject != owl:Class &&
        ?subject != rdf:List &&
        ?subject != rdf:Property &&
        ?subject != rdfs:Class &&
        ?subject != rdfs:Datatype &&
        ?subject != rdfs:ContainerMembershipProperty &&
        ?subject != owl:DatatypeProperty &&
        ?subject != owl:NamedIndividual &&
        ?subject != owl:Ontology )
} ORDER BY ?subject






