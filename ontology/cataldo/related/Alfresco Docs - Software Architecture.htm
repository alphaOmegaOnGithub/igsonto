<!DOCTYPE html>
<html style="--search-bar: 0;" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="icon" type="image/png" href="https://docs.alfresco.com/assets/img/logo.png">
    <title>
      Alfresco Docs - Software Architecture
    </title>
    <link rel="stylesheet" href="Alfresco%20Docs%20-%20Software%20Architecture_files/bulma.css">
    <link rel="stylesheet" href="Alfresco%20Docs%20-%20Software%20Architecture_files/highlight-default.css">

    <link href="Alfresco%20Docs%20-%20Software%20Architecture_files/css2.css" rel="stylesheet">
    
    <script async="" src="Alfresco%20Docs%20-%20Software%20Architecture_files/google-analytics_analytics.js"></script><script src="Alfresco%20Docs%20-%20Software%20Architecture_files/searchbar.js"></script>
    <script src="Alfresco%20Docs%20-%20Software%20Architecture_files/tooltip.js"></script>
    <script src="Alfresco%20Docs%20-%20Software%20Architecture_files/tabs.js"></script>
    <script src="Alfresco%20Docs%20-%20Software%20Architecture_files/tocspy.js"></script>
    <script src="Alfresco%20Docs%20-%20Software%20Architecture_files/searchresults.js" data-elastic="https://search-docs-production-gjsdgg3cln5hrgcqi7s6ugtyle.us-east-1.es.amazonaws.com" data-index="prod"></script>

    <script src="Alfresco%20Docs%20-%20Software%20Architecture_files/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>

    <link rel="stylesheet" href="Alfresco%20Docs%20-%20Software%20Architecture_files/main.css">
    
    <!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-W4HV22');</script>
<!-- End Google Tag Manager -->
    
  <link href="data:text/css,%3Ais(%5Bid*%3D'google_ads_iframe'%5D%2C%5Bid*%3D'taboola-'%5D%2C.taboolaHeight%2C.taboola-placeholder%2C%23credential_picker_container%2C%23credentials-picker-container%2C%23credential_picker_iframe%2C%5Bid*%3D'google-one-tap-iframe'%5D%2C%23google-one-tap-popup-container%2C.google-one-tap-modal-div%2C%23amp_floatingAdDiv%2C%23ez-content-blocker-container)%20%7Bdisplay%3Anone!important%3Bmin-height%3A0!important%3Bheight%3A0!important%3B%7D" rel="stylesheet" type="text/css"></head>

  
  
  

  <body>
    
    <!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-W4HV22"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->
    
        
    <script>
      window.searchScope = {
        product: 'content-services',
        version: 'latest',
      }
    </script>
    
<div class="searchbar-holder" id="searchbar-holder">
  <div class="container">
        <div class="control has-icons-left has-icons-right searchbar">
      <div class="dropdown-trigger">
        <input class="input" id="topsearch-input" placeholder="Search for references, tutorials..." type="text">
        <span class="icon is-left is-small">
          <i class="icon-search"></i>
        </span>
        <span class="icon is-right is-small search-clear is-hidden" id="topsearch-clear">
          <i class="icon-clear"></i>
        </span>
      </div>
      <div class="dropdown-menu" id="topsearch-dropdown-content" role="menu">
        <div class="dropdown-content">
          
          <a class="dropdown-item special is-active" id="localscope" data-placeholder="Start typing to search..." data-value="current" data-url="/search#query/content-services%2Flatest/" href="#" data-index="0">
            <span class="hint">In: content-services</span>
            <span class="query"></span>
          </a>
          <a class="dropdown-item special" data-placeholder="Start typing to search..." data-value="global" data-url="/search#query//" href="#" data-index="1">
            <span class="hint">In: All docs</span>
            <span class="query"></span>
          </a>

        </div>
      </div>
    </div>
    
    <a class="searchbar-close" href="#" id="search-close">Close</a>
    
    
    
  </div>
</div>

    <!-- Main Menu -->
<header class="section section-mainmenu">
  <nav aria-label="main navigation" class="navbar container" role="navigation">
    <div class="navbar-brand">
      <a class="navbar-item" href="https://www.alfresco.com/" target="_blank">
        <img class="icon-logo" src="Alfresco%20Docs%20-%20Software%20Architecture_files/hyland-alfresco-logos-horizontal-RGB.png" alt="Hyland | Alfresco logo">
      </a>

      <a aria-expanded="false" aria-label="menu" class="navbar-burger burger" data-target="navbaralfresco" role="button">
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
      </a>
    </div>
    <div class="navbar-extra">
      
      <a class="navbar-item" href="https://docs.alfresco.com/" id="search-toggle">
        <i class="icon-search"></i>
      </a>
        
      
      
<!-- Hide language dropdown

      <div class="navbar-item has-dropdown is-hoverable" onclick="this.classList.toggle('is-active')">
        <a class="navbar-link">
          Eng
        </a>


        <div class="navbar-dropdown is-boxed navbar-lang">
          <a href="/de/" class="navbar-item">
            Deutch
          </a>
          <a href="/sve/" class="navbar-item">
            Svenska
          </a>
        </div>
      </div>  

-->
    </div>

    <div class="navbar-menu" id="navbaralfresco">
      <div class="navbar-start">
        <div class="navbar-item">
          <a class="navbar-link is-arrowless" href="https://docs.alfresco.com/">
            Docs
          </a>
        </div>

      </div>

      <div class="navbar-end">
        <div class="navbar-item has-dropdown is-hoverable">
          <a class="navbar-link is-arrowless">
            Services
          </a>

          <div class="navbar-dropdown is-boxed navbar-smallsub navbar-applications">
                
    
      
        <a class="navbar-item" href="https://docs.alfresco.com/content-services/latest/">Content</a>
      
    
       
      <div class="container">
        <h1>Process</h1>
        
          <a class="navbar-item" href="https://docs.alfresco.com/process-services/latest/">Process Services</a>
        
          <a class="navbar-item" href="https://docs.alfresco.com/process-automation/latest/">Process Automation</a>
        
      </div>
      
    
      
        <a class="navbar-item" href="https://docs.alfresco.com/governance-services/latest/">Governance</a>
      
    


          </div>
        </div>
        <div class="navbar-item has-dropdown is-hoverable">
          <a class="navbar-link is-arrowless">
            Integrations
          </a>

          <div class="navbar-dropdown is-boxed navbar-integrations">
            <!--  -->
<div class="columns">
    
    
      
      
    <div class="column">
      <div class="container">
      <h1>Synchronize</h1>
      
        <a class="navbar-item" href="https://docs.alfresco.com/sync-service/latest/">Sync Service</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/desktop-sync/latest/">Desktop Sync</a>
      
      </div>
    </div>
    
      
      
    <div class="column">
      <div class="container">
      <h1>Transform</h1>
      
        <a class="navbar-item" href="https://docs.alfresco.com/transform-service/latest/">Transform Service</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/transformation-engine/latest/">Document Transformation Engine</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/media-management/latest/">Media Management</a>
      
      </div>
    </div>
    
      
      
    <div class="column">
      <div class="container">
      <h1>Search</h1>
      
        <a class="navbar-item" href="https://docs.alfresco.com/search-enterprise/latest/">Search Enterprise</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/search-services/latest/">Search Services</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/insight-engine/latest/">Search and Insight Engine</a>
      
      </div>
    </div>
    
      
      
    <div class="column">
      <div class="container">
      <h1>Federation</h1>
      
        <a class="navbar-item" href="https://docs.alfresco.com/federation-services/latest/">Federation</a>
      
      </div>
    </div>
    
      
        </div><div class="columns">
        
      
      
    <div class="column">
      <div class="container">
      <h1>Identity</h1>
      
        <a class="navbar-item" href="https://docs.alfresco.com/identity-service/latest/">Identity Service</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/saml-module/latest/">SAML Module</a>
      
      </div>
    </div>
    
      
      
    <div class="column">
      <div class="container">
      <h1>Intelligence</h1>
      
        <a class="navbar-item" href="https://docs.alfresco.com/intelligence-services/latest/">Intelligence</a>
      
      </div>
    </div>
    
      
      
    <div class="column">
      <div class="container">
      <h1>Content Stores</h1>
      
        <a class="navbar-item" href="https://docs.alfresco.com/aws-s3/latest/">Amazon S3</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/microsoft-azure/latest/">Microsoft Azure</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/aws-glacier/latest/">Amazon Glacier</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/centera/latest/">EMC Centera</a>
      
      </div>
    </div>
    
      
      
    <div class="column">
      <div class="container">
      <h1>Business Connectors</h1>
      
        <a class="navbar-item" href="https://docs.alfresco.com/salesforce/latest/">Salesforce</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/sap/latest/">SAP</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/sap-cloud/latest/">SAP Cloud</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/microsoft-365/latest/">Microsoft 365</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/microsoft-teams/latest/">Microsoft Teams</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/microsoft-outlook/latest/">Microsoft Outlook</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/microsoft-office/latest/">Microsoft Office</a>
      
        <a class="navbar-item" href="https://docs.alfresco.com/google-drive/latest/">Google Docs</a>
      
      </div>
    </div>
    

    
    
    
 </div>

          </div>
        </div>


        <div class="navbar-item has-dropdown is-hoverable">
          <a class="navbar-link is-arrowless">
            Applications
          </a>

          <div class="navbar-dropdown is-boxed navbar-smallsub navbar-applications">
                
    
       
      <div class="container">
        <h1>Digital Workspace</h1>
        
          <a class="navbar-item" href="https://docs.alfresco.com/digital-workspace/latest/">Digital Workspace</a>
        
          <a class="navbar-item" href="https://docs.alfresco.com/mobile-workspace/latest/">Mobile Workspace</a>
        
      </div>
      
    
      
        <a class="navbar-item" href="https://www.alfresco.com/abn/adf/docs/">Application Development Framework</a>
      
    
      
        <a class="navbar-item" href="https://docs.alfresco.com/content-accelerator/latest/">Content Accelerator</a>
      
    
      
        <a class="navbar-item" href="https://docs.alfresco.com/enterprise-viewer/latest/">Enterprise Viewer</a>
      
    

          </div>
        </div>
      </div>
    </div>
  </nav>
</header>

<!-- End Main Menu -->
    <!--submenu-->
    <section class="section section-submenu">
    <div class="container is-vertical-center">
      <div class="content-title-version">
        <div class="content-title">Alfresco Content Services</div>
        <div class="content-version">
        
          <div class="dropdown is-clickable" id="version-selector">
            <div class="dropdown-trigger">
              <button class="button is-rounded is-small" aria-haspopup="true" aria-controls="dropdown-menu">
                <span class="arrow">23.1</span>
              </button>
            </div>

            <div class="dropdown-menu" id="dropdown-menu" role="menu">
              <div class="dropdown-content">

              

              

              

              
              
              

                                

                

                <a href="https://docs.alfresco.com/content-services/latest/develop/software-architecture/" class="dropdown-item is-active">
                  <span>23.1</span><span class="tag is-success">Latest</span>
                </a>

              
              
              
              
              

                                

                

              <a href="https://docs.alfresco.com/content-services/7.4/develop/software-architecture/" class="dropdown-item">
                <span>7.4</span>
              </a>

              
              
              
              
              

                                

                

              <a href="https://docs.alfresco.com/content-services/7.3/develop/software-architecture/" class="dropdown-item">
                <span>7.3</span>
              </a>

              
              
              
              
              

                                

                

              <a href="https://docs.alfresco.com/content-services/7.2/develop/software-architecture/" class="dropdown-item">
                <span>7.2</span>
              </a>

              
              
              
              
              

                                

                

              <a href="https://docs.alfresco.com/content-services/7.1/develop/software-architecture/" class="dropdown-item">
                <span>7.1</span>
              </a>

              
              
              
              
              

                                

                

              <a href="https://docs.alfresco.com/content-services/7.0/develop/software-architecture/" class="dropdown-item">
                <span>7.0</span>
              </a>

              
              
              
              
              

                                

                

              <a href="https://docs.alfresco.com/content-services/6.2/develop/software-architecture/" class="dropdown-item">
                <span>6.2</span>
              </a>

              
              
              
              
              

                                

                

              <a href="https://docs.alfresco.com/content-services/6.1/develop/software-architecture/" class="dropdown-item">
                <span>6.1</span>
              </a>

              
              
              
              
              

                                

                

              <a href="https://docs.alfresco.com/content-services/6.0/develop/software-architecture/" class="dropdown-item">
                <span>6.0</span>
              </a>

              
              
              
              
              

                                

                

              <a href="https://docs.alfresco.com/content-services/5.2/develop/software-architecture/" class="dropdown-item">
                <span>5.2</span>
              </a>

              
              
              
              
              

                                

                

              <hr class="dropdown-divider">
              <a href="https://docs.alfresco.com/content-services/community/develop/software-architecture/" class="dropdown-item">
                  <span>Community</span>
              </a>

                
              
              

            </div>


          </div>

        

        </div>
      </div>

      <div class="tabs">
        <ul>


<li class="">
  <a href="https://docs.alfresco.com/content-services/latest/">Reference</a>
</li>



<li class="">
  <a href="https://docs.alfresco.com/content-services/latest/tutorial/">Tutorials</a>
</li>






<li class="">
  <a href="https://docs.alfresco.com/content-services/latest/support/">Supported Platforms</a>
</li>




<li class="">
  <a href="https://docs.alfresco.com/content-services/latest/release/">What’s New</a>
</li>
     

        </ul>
      </div>


    </div>
  </div></section>
    <!--content-->
    <section class="section section-content">
      <div class="container">
        <div class="columns">
          <div class="column is-narrow content-menu-column" style="">
            <div class="left-side-menu"> 
                <button class="button close-toc" onclick="tocToggler()">
                  <span class="icon is-small">
                    <img src="Alfresco%20Docs%20-%20Software%20Architecture_files/clear_24px.svg">
                  </span>
                  <span>Table of contents</span>
                </button>
                
<ul id="leftside-menu" style="--min-height: 0px;" class="is-ready-fade" data-inited="true">

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/">Introduction</a>
  
</li>

<li class="">
  <span class="menuitem-title">Install</span>
   <span class="expand-button"></span>
<ul style="--max-height: 422px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/install/">Overview</a>
  
</li>

<li class="">
  <span class="menuitem-title">Install with zip</span>
   <span class="expand-button"></span>
<ul style="--max-height: 136px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/install/zip/">Overview</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/install/zip/tomcat/">Install on Tomcat</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/install/zip/amp/">Install Alfresco Module Package</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/install/zip/additions/">Install additional software</a>
  
</li>



</ul>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/install/ansible/">Install with Ansible</a>
  
</li>

<li class="">
  <span class="menuitem-title">Install using containers</span>
   <span class="expand-button"></span>
<ul style="--max-height: 170px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/install/containers/">Overview</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/install/containers/docker-compose/">Install using Docker Compose</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/install/containers/helm/">Install using Helm</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/install/containers/helm-examples/">Helm install examples</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/install/containers/customize/">Customization</a>
  
</li>



</ul>
  
</li>



</ul>
  
</li>

<li class="">
  <span class="menuitem-title">Upgrade</span>
   <span class="expand-button"></span>
<ul style="--max-height: 68px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/upgrade/">Overview</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/upgrade/log4j2-migrate/">Log4j2 Migration Guide</a>
  
</li>



</ul>
  
</li>

<li class="">
  <span class="menuitem-title">Configure</span>
   <span class="expand-button"></span>
<ul style="--max-height: 432px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/config/">Overview</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/config/subsystems/">Subsystems</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/config/databases/">Databases</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/config/repository/">Repository</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/config/file-servers/">File servers</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/config/email/">Email</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/config/activemq/">ActiveMQ</a>
  
</li>

<li class="">
  <span class="menuitem-title">Smart Folders</span>
   <span class="expand-button"></span>
<ul style="--max-height: 68px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/config/smart-folders/">Overview</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/config/smart-folders/sf-faq/">FAQ</a>
  
</li>



</ul>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/config/models/">Content models</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/config/action/">Process Services actions</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/config/mtls/">Mutual TLS</a>
  
</li>



</ul>
  
</li>

<li class="">
  <span class="menuitem-title">Administer</span>
   <span class="expand-button"></span>
<ul style="--max-height: 1014px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/">Overview</a>
  
</li>

<li class="">
  <span class="menuitem-title">Admin Tools</span>
   <span class="expand-button"></span>
<ul style="--max-height: 170px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/admin-console/">Repository Admin Console</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/share-admin-tools/">Share Admin Tools</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/control-center/">Control Center</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/support-tools/">Support Tools</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/import-transfer/">Import and transfer tools</a>
  
</li>



</ul>
  
</li>

<li class="">
  <span class="menuitem-title">Manage security</span>
   <span class="expand-button"></span>
<ul style="--max-height: 204px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/securing-install/">Securing your installation</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/securing-html-transforms/">Securing HTML Transformations</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/users-groups/">Users and groups</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/auth-sync/">Authentication and sync</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/security/">Authorization</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/audit/">Auditing</a>
  
</li>



</ul>
  
</li>

<li class="">
  <span class="menuitem-title">Backup and migrate</span>
   <span class="expand-button"></span>
<ul style="--max-height: 68px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/backup-restore/">Backup and restore</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/migration/">Migration</a>
  
</li>



</ul>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/query-accelerator/">Query Accelerator</a>
  
</li>

<li class="">
  <span class="menuitem-title">High availability features</span>
   <span class="expand-button"></span>
<ul style="--max-height: 68px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/cluster/">Clustering</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/replication/">Content replication</a>
  
</li>



</ul>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/license/">Licenses</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/templates/">File and folder templates</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/metadata-extraction/">File metadata extraction</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/workflows/">Workflows</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/transformations/">Transformations</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/content-stores/">Content stores</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/db-cleanup/">Database table cleanup</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/node-cleanup/">Node service cleanup</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/jmx-reference/">JMX reference</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/admin/troubleshoot/">Troubleshooting</a>
  
</li>



</ul>
  
</li>

<li class="">
  <span class="menuitem-title">Using</span>
   <span class="expand-button"></span>
<ul style="--max-height: 524px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/">Overview</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/share/">Alfresco Share</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/dashboard/">Profiles and dashboards</a>
  
</li>

<li class="">
  <span class="menuitem-title">Sites</span>
   <span class="expand-button"></span>
<ul style="--max-height: 68px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/sites/">Overview</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/sites/features/">Features</a>
  
</li>



</ul>
  
</li>

<li class="">
  <span class="menuitem-title">Content</span>
   <span class="expand-button"></span>
<ul style="--max-height: 170px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/content/">Overview</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/content/manage/">Manage content</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/content/files-folders/">Files and folders</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/content/rules/">Folder rules</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/content/tags-categories/">Tags and Categories</a>
  
</li>



</ul>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/tasks/">Tasks and workflows</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/search/">Search</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/smart-folders/">Smart Folders</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/using/permissions/">Roles and permissions</a>
  
</li>



</ul>
  
</li>

<li class="is-expanded">
  <span class="menuitem-title">Develop</span>
   <span class="expand-button"></span>
<ul style="--max-height: 2846px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/">Getting started</a>
  
</li>

<li class="is-selected is-expanded">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/software-architecture/">Software architecture</a>
  
<ul id="tocspy">
  
<li class=""><a class="menuitem-title" href="#high-level-architecture">High-level architecture</a></li><li class=""><a class="menuitem-title" href="#detailed-architecture">Detailed architecture</a></li><li class="is-selected"><a class="menuitem-title" href="#repoconcepts">Content repository concepts</a></li><li><a class="menuitem-title" href="#platformarch">Platform architecture</a></li><li><a class="menuitem-title" href="#web-ui-architecture">Web UI architecture</a></li><li><a class="menuitem-title" href="#apis">APIs</a></li></ul>

  
</li>

<li class="">
  <span class="menuitem-title">Software Development Kits (SDK)</span>
   <span class="expand-button"></span>
<ul style="--max-height: 68px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/sdk/">In-Process SDK (4.6)</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/oop-sdk/">Out-of-Process SDK (5.2)</a>
  
</li>



</ul>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/extension-packaging/">Extension packaging (modules)</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/extension-inspector/">Extension Inspector</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/overview-ext-points/">Extension points overview</a>
  
</li>

<li class="">
  <span class="menuitem-title">Out-of-Process extension points</span>
   <span class="expand-button"></span>
<ul style="--max-height: 136px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/oop-ext-points/">Overview</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/oop-ext-points/events/">Events</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/oop-ext-points/event-gateway/">Event Gateway</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/oop-ext-points/rest-api-java-wrapper/">ReST API Java Wrapper</a>
  
</li>



</ul>
  
</li>

<li class="">
  <span class="menuitem-title">In-Process platform extension points</span>
   <span class="expand-button"></span>
<ul style="--max-height: 756px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/">Overview</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/content-model/">Content model</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/repo-actions/">Actions</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/web-scripts/">Web scripts</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/javascript-root-objects/">JavaScript Root Objects</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/behavior-policies/">Behavior policies</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/scheduled-jobs/">Scheduled jobs</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/metadata-extractors/">Metadata Extractors and Embedders</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/mimetypes/">Mimetypes</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/content-transformers-renditions/">Content Transformers and Renditions</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/permissions/">Permissions and roles</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/data-lists/">Data lists</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/ratings/">Ratings</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/bootstrap-content/">Bootstrapping content</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/patches/">Patches</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/module-components/">Module components</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/subsystems/">Subsystems</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/authentication/">Authentication</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/content-stores/">Content Stores</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/audit-log/">Audit Log</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/admin-console-components/">Admin Console Components</a>
  
</li>



</ul>
  
</li>

<li class="">
  <span class="menuitem-title">Share UI extension points</span>
   <span class="expand-button"></span>
<ul style="--max-height: 714px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/">Overview</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/share-config/">Share configuration</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/doclib/">Document Library</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/share-themes/">Share Themes</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/site-presets/">Site Presets</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/web-scripts/">Web Scripts</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/surf-pages/">Surf Pages</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/surf-dashlets/">Surf Dashlets</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/surf-widgets/">Surf Widgets</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/surf-extension-modules/">Surf Extension Modules</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/aikau-menus/">Aikau Menus</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/aikau-pages/">Aikau Pages</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/aikau-dashlets/">Aikau Dashlets</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/aikau-widgets/">Aikau Widgets</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/evaluators/">Evaluators</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/javascript-root-objects/">JavaScript Root Objects</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/form-controls/">Form Controls</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/form-processors/">Form Processor</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/form-processor-filters/">Form Processor Filters</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/form-field-validation-handlers/">Form Field Validation Handlers</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/modify-ootb-code/">Modifying out-of-the-box code</a>
  
</li>



</ul>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/tools/">Useful tools</a>
  
</li>

<li class="">
  <span class="menuitem-title">ReST API guide</span>
   <span class="expand-button"></span>
<ul style="--max-height: 327px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/">Overview</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/install/">Install and authenticate</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/get-repo-info/">Get Repository Information</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/folders-files/">Managing Folders and Files</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/cloud-storage-props/">Cloud Storage Properties</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/sites/">Managing Sites</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/people-groups/">Managing People and Groups</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/audit-apps/">Managing Audit Applications and Logs</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/searching/">Searching for content</a>
  
</li>



</ul>
  
</li>

<li class="">
  <span class="menuitem-title">Reference</span>
   <span class="expand-button"></span>
<ul style="--max-height: 306px;">
    
<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/reference/debugging-ref/">Debugging</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/reference/java-foundation-ref/">Java Foundation API</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/reference/cmis-ref/">CMIS API</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/reference/web-scripts-ref/">Web Scripts</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/reference/surf-framework-ref/">Surf Framework</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/reference/freemarker-ref/">FreeMarker</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/reference/share-document-library-ref/">Share Document Library</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/reference/repo-root-objects-ref/">Repository JavaScript root objects</a>
  
</li>

<li class="">
  <a class="menuitem-title" href="https://docs.alfresco.com/content-services/latest/develop/reference/aikau-intro-ref/">Introduction to Aikau</a>
  
</li>



</ul>
  
</li>



</ul>
  
</li>



</ul>

            </div>
          </div>
          <div class="column column-content">
            <button class="button is-rounded" id="table-of-contents" onclick="tocToggler()">Table of contents</button>
            <div class="content" data-aredir="createHref">
              <!-- For each landing page, print out the selected version for the product (unless it's a Community version). -->
              <!-- A landing page has a path with format: <product-name>/<product-version>/index.md -->
              <!-- A longer path is considered a sub page, which should not have the version printed out. -->
              
              
              <h1>Software Architecture</h1>
              
              <article>
                <p>This section gives an introduction to the Content Services architecture from a developer’s perspective.</p>

<h2 class="is-collected" data-originalid="high-level-architecture"><a id="high-level-architecture" data-header="H2" class="is-hidden"></a>High-level architecture<a class="button" href="#high-level-architecture"></a></h2>
<p>Before we get into details, let’s start by looking at Content Services from a high level. Traditionally there has
always been a few well known components defining Content Services. The following diagram illustrates the main 
components that the Content Services consists of. The <strong>Platform</strong>, the User Interfaces (<strong>UI</strong>), and the <strong>Search</strong> engine. 
These components are implemented as separate web applications:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/acs_70_architecture_simplified.png" alt="acs_70_architecture_simplified"></p>

<p>The main component is called the <strong>Platform</strong> and is implemented in the <code>alfresco.war</code> web application. It provides the 
repository where content is stored plus all the associated content services, such as classification and versioning. 
Traditionally this component is also referred to as the Repository. There are several so called extension points that
can be used to build customizations for the platform, they are usually deployed as AMP or JAR modules.</p>

<p><a href="https://docs.alfresco.com/content-services/latest/using/share/">Alfresco Share</a> provides a web client interface (that is a User Interface, UI) 
for the repository and is implemented as the <code>share.war</code> web application. There is also a newer UI called <a href="https://docs.alfresco.com/digital-workspace/latest/">Digital Workspace</a>, 
based on the Alfresco <a href="https://www.alfresco.com/abn/adf/docs/" target="_blank">Application Development Framework (ADF)</a>, 
it’s also deployed as a WAR. The user interfaces makes it easy for users to manage their sites, folders, documents, 
users and so on.</p>

<p>Alfresco Share also provides several extension points that can be used to build customizations for that user interface, 
they are also deployed as AMP or JAR modules. If you want to extend the Digital Workspace UI JSON files are used.</p>

<p>The <a href="https://docs.alfresco.com/search-services/latest/">search service</a> functionality is implemented on top of Apache <strong>Solr</strong> 
and provides the indexing of all content, which enables powerful search functionality. Search is delivered as the <code>solr.war</code> 
web application. There are also mobile clients that will access the content via ReST APIs provided by the platform.</p>

<p>Most Content Services projects will implement a domain specific web client based on ADF. It gives you full freedom to 
design a content and process web client supporting exactly the use cases needed by the domain. Giving the end-users the 
best possible experience.</p>

<p>The Platform and UI components run in the same Apache Tomcat web application server, which is Java based. So if you are 
a Java developer you feel quite at home working with Content Services, even through it is possible to work with 
other languages when implementing external extensions.</p>

<p>The Search component runs in its own Jetty web application server. The Platform is usually also integrated with a 
Directory Server (LDAP) to be able to sync users and groups with Content Services. And most installations also integrates 
with an SMTP server so the Platform can send emails, such as site invitations.</p>

<p>Extensions to the repository , such as a domain specific content model, and extensions to the UI, such as forms to support 
custom types, has traditionally been done with <a href="https://docs.alfresco.com/content-services/latest/develop/extension-packaging/">Alfresco Modules Packages (AMP)</a> 
and later on as JARs. These are running in the same process as the repository. This changes with version 7 of Content Services 
where out-of-process extensions are possible as we will see.</p>

<h2 class="is-collected" data-originalid="detailed-architecture"><a id="detailed-architecture" data-header="H2" class="is-hidden"></a>Detailed architecture<a class="button" href="#detailed-architecture"></a></h2>
<p>Now when we got an idea of how the Content Services architecture looks like on a high level, it’s time to go more into 
detail about the software architecture for the latest Content Services version:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/acs_70_architecture_detailed.png" alt="acs_70_architecture_detailed"></p>

<p>We can see that there are a number of components that we did leave out in the simplified diagram. The main component
that we did not talk about is the <a href="https://docs.alfresco.com/transform-service/latest/">Transformation Service</a>, which consist 
of a router and a number of so called T-Engines. It’s used to transform an uploaded document into different formats 
depending on what it should be used for, such as thumbnail, preview, text for indexing etc.</p>

<p>Another important component is the <a href="https://docs.alfresco.com/sync-service/latest/">Sync Service</a> that is used by the 
<a href="https://docs.alfresco.com/desktop-sync/latest/">Desktop Sync</a> clients. They enable you to work with the repository content 
from for example Windows Explorer instead of any of the web user interfaces.</p>

<p>It might come as a surprise, when you install Content Services an instance of <a href="https://activemq.apache.org/" target="_blank">Apache ActiveMQ</a> 
server is also installed. It’s an integral part Content Services and sits as a message broker between the Repository and 
several other components:</p>

<ul>
  <li><em>Transformation Service</em>: receives messages about transformations that have been requested by the repository.</li>
  <li><em>Sync Service</em>: receives messages about folder and document changes in the repository</li>
  <li><em>External extensions</em>: maybe the most important addition to
 Content Services version 7 is that it is now possible to build 
out-of-process extensions. These extensions listen to the repository 
events and then execute code depending on what happened in the 
repository, such as file uploaded, folder created etc.</li>
</ul>

<p>The Content Services system is implemented in Java, which means that it can run on most servers that can run 
the Java Standard Edition. The platform components have been implemented using the Spring framework, which provides 
the ability to modularize functionality, such as versioning, security, and rules. The platform provides a scripting 
environment to simplify adding new functionality and developing new programming interfaces. This portion of the 
architecture is known as Web Scripts and can be used for both data and presentation services. The lightweight architecture 
is easy to download, install, and deploy.</p>

<p>For more information about the internals of the Platform, and specifically the content repository, see the 
<a href="#repoconcepts">concepts</a> section next. After that read more about the extension points.</p>

<p>Content Services provides a number of <a href="https://docs.alfresco.com/content-services/latest/develop/overview-ext-points/">extension points</a><br>
that will allow you to customize the management of content specific to your domain. These extensions points can be divided 
into platform extensions and user interface extensions:</p>

<ul>
  <li><a href="#platformarch">Platform extension points and detailed architecture</a></li>
  <li><a href="#sharearchitecture">Share extension points and detailed architecture</a></li>
  <li><a href="https://docs.alfresco.com/digital-workspace/latest/develop/extensions/">Digital workspace extension points</a></li>
</ul>

<h2 class="is-collected" data-originalid="repoconcepts"><a id="repoconcepts" data-header="H2" class="is-hidden"></a>Content repository concepts<a class="button" href="#repoconcepts"></a></h2>
<p>It is important as a developer to have a good understanding of the fundamental concepts of Content Services 
when implementing extensions. It is vital to know what things such as repository, node, store, type, aspect, association and 
so on mean in the context of Content Services.</p>

<h3 class="is-collected" data-originalid="overview"><a id="overview" data-header="H3" class="is-hidden"></a>Overview<a class="button" href="#overview"></a></h3>
<p>The repository is comparable to a database, except that it holds more than data. The actual binary streams of the 
content are stored in files managed in the repository, although these files are for internal use only and don’t reflect 
what you might see through the user interfaces. The repository also holds the associations among content items, 
classifications, and the folder/file structure. The folder/file structure is maintained in the database and is not 
reflected in the internal file storage structure.</p>

<p>The repository implements services including:</p>

<ul>
  <li>Definition of content structure (modeling)</li>
  <li>Creation, modification, and deletion of content, associated metadata, and relationships</li>
  <li>Query of content</li>
  <li>Access control on content (permissions)</li>
  <li>Versioning of content</li>
  <li>Content renditions</li>
  <li>Locking</li>
  <li>Events</li>
  <li>Audits</li>
  <li>Import/Export</li>
  <li>Multilingual</li>
  <li>Rules/Actions</li>
</ul>

<p>The repository implements and exposes these services through an <a href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/">Alfresco ReST API</a> 
and CMIS protocol bindings. The storage engine of the repository stores and retrieves content, metadata, and relationships.</p>

<h3 class="is-collected" data-originalid="key-concepts"><a id="key-concepts" data-header="H3" class="is-hidden"></a>Key Concepts<a class="button" href="#key-concepts"></a></h3>
<p>All files that are stored in Content Services are stored in what is referred to as the <strong>repository</strong>. The repository is 
a logical entity that consists of three important parts:</p>

<ol>
  <li>The physical content files that are uploaded, which are stored in the file system.</li>
  <li>The index files created when indexing the uploaded file so it is 
searchable, which are managed by an external Apache Solr server.</li>
  <li>The metadata/properties for the file, which are stored in a relational database management system (RDBMS).</li>
</ol>

<p>When a file is uploaded to the repository it is stored on disk in a special directory structure that is based on the date 
and time of the upload. The file name is also changed to the UUID (Universally Unique Identifier) assigned to the file 
when it is added to the repository. The file’s metadata is stored in an RDBMS such as PostgreSQL. Indexes are also 
stored on the disk. When the file is added to the repository it is stored in a folder, and the folder has domain 
specific metadata, rules, and fine grained permissions. The top folder in the repository is called <strong>Company Home</strong>, 
although it will be referred to with the name <strong>repository</strong> in the Alfresco Share user interface.</p>

<p>When a file is uploaded to the repository it is always classified according to a so called <strong>content model</strong>. A content 
model is one of the first things that will be designed and implemented in a content management project. It customizes 
the repository to store information for a specific domain, such as healthcare, finance, manufacturing, legal etc. By 
classifying content (i.e. files and folders) end users can search and process content more effeciently.</p>

<h3 class="is-collected" data-originalid="logical-structure"><a id="logical-structure" data-header="H3" class="is-hidden"></a>Logical Structure<a class="button" href="#logical-structure"></a></h3>
<p>All the files and folders that are uploaded and created in the repository are referred to as <strong>nodes</strong>. Some nodes, 
such as folders and rules, can contain other nodes (and are therefore known as container nodes). Nodes can also be 
associated with other nodes in a peer to peer relationship, in a similar fashion to how an HTML file can reference an 
image file. All nodes live in a <strong>Store</strong>. Each store has a root node at the top, and nodes can reference specific files, 
as shown in the following diagram:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-repository-concepts-logical-structure.png" alt=""></p>

<h3 class="is-collected" data-originalid="stores-overview"><a id="stores-overview" data-header="H3" class="is-hidden"></a>Stores Overview<a class="button" href="#stores-overview"></a></h3>
<p>The Repository contains multiple logical stores. However, a node lives only in one store. Most of the stores are 
implemented as data in the connected RDBMS, only the <strong>Content Store</strong> is implemented so as to store items on disk:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-repository-concepts-stores-overview.png" alt=""></p>

<h4 class="is-collected" data-originalid="the-main-stores"><a id="the-main-stores" data-header="H4" class="is-hidden"></a>The main stores<a class="button" href="#the-main-stores"></a></h4>
<ul>
  <li>The <strong>Working Store</strong> (<code>workspace://SpacesStore</code>) contains the metadata for all active/live nodes in the Repository. 
This store is implemented using a database (RDBMS).</li>
  <li>The <strong>Content Store</strong> contains the physical files uploaded to the Repository and is located in the 
<code>{Alfresco install dir}/alf_data/contentstore</code> directory on the filesystem by default, but can also be configured to use 
other storage systems, for example, Amazon S3. It is also possible to define content store policies for storing files 
on different storage systems, effectively defining more than one physical content store.</li>
  <li>Whenever a node is deleted, the metadata for the node is moved to the <strong>Archive Store</strong> (<code>archive://SpacesStore</code>), 
which uses the configured database. The physical file for a deleted node is moved (by default after 14 days) to the 
<code>{Alfresco install dir}/alf_data/contentstore.deleted</code> directory, where it stays indefinitely. However, a clean-up job 
can be configured to remove the file at a certain point in time (referred to as eager clean-up).</li>
  <li>When the <code>versionable</code> aspect is applied to a node, a version history is created in the <strong>Version Store</strong> (<code>workspace://version2Store</code>). 
Versioned node metadata is stored in the database and files remain in the <code>{Alfresco install dir}/alf_data/contentstore</code> 
directory. Versioning is not applicable to folder nodes.</li>
  <li>The <strong>System Store</strong> is used to save information about installed Alfresco Content Services extension modules.</li>
</ul>

<h4 class="is-collected" data-originalid="content-store-implementation"><a id="content-store-implementation" data-header="H4" class="is-hidden"></a>Content Store Implementation<a class="button" href="#content-store-implementation"></a></h4>
<p>When considering file storage, it should be noted that files added to Content Services can be of almost any type, and 
include images, photos, binary document files (Word, PPT, Excel), as well as text files (HTML, XML, plain text). Some 
binary files such as videos and music files can be relatively large. Content store files are located on the disk, rather 
than in the database as BLOBs. There are several reasons for this:</p>

<ol>
  <li>It removes incompatibility issues across database vendors.</li>
  <li>The random file access support cannot be provided by database persistence without first copying files to the file system.</li>
  <li>Possibility of real-time streaming (for direct streaming of files to browser).</li>
  <li>Standard database access would be difficult when using BLOBs as the most efficient BLOB APIs are vendor-specific.</li>
  <li>Faster access.</li>
</ol>

<h4 class="is-collected" data-originalid="content-store-selectors"><a id="content-store-selectors" data-header="H4" class="is-hidden"></a>Content Store Selectors<a class="button" href="#content-store-selectors"></a></h4>
<p>The <em>content store selector</em> provides a mechanism to control the physical location on disk for a content file associated 
with a particular content node. This allows storage polices to be implemented to control which underlying physical 
storage is used, based on your applications needs or business policies.</p>

<p>For example, it is possible to use a very fast tier-1 Solid State Drive (SSD) for our most important content files. 
Then, based on business policies that have been decided, gradually move the data, as it becomes less important, to 
cheaper tier-2 drives such as Fiber Channel (FC) drives or Serial ATA drives. In this way, it is possible to manage 
the storage of content more cost effectively:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-repository-concepts-content-store-selectors.png" alt=""></p>

<h4 class="is-collected" data-originalid="store-reference"><a id="store-reference" data-header="H4" class="is-hidden"></a>Store Reference<a class="button" href="#store-reference"></a></h4>
<p>When working with the APIs a store is accessed via its <strong>store reference</strong>, for example <code>workspace://SpacesStore</code>. The 
store reference consists of two parts: the protocol and the identifier. The first part (for example <code>workspace</code>) is called 
the protocol and indicates the content you are interested in, such as live content (<code>workspace://SpacesStore</code>) or 
archived content (<code>archive://SpacesStore</code>). The second part is the identifier (the type of store) for the store, such as 
<code>SpacesStore</code>, which contains folder nodes (previously called spaces) and file nodes data, or for example 
<code>lightWeightVersionStore</code> that contains version history data.</p>

<blockquote>
  <p><strong>Important:</strong> The reason some things are referred to as spaces (for example SpacesStore) is that in previous versions of 
Content Services a folder used to be called a space. The Share user interface has generally been changed to use the name 
folder instead of the name space. However, there is functionality, such as Space Templates, that still uses the term “space”. 
A space can simply be thought of as a folder.</p>
</blockquote>

<h3 class="is-collected" data-originalid="node-information"><a id="node-information" data-header="H3" class="is-hidden"></a>Node Information<a class="button" href="#node-information"></a></h3>
<p>A node usually represents a folder or a file. Each store also contains a special root node at the top level with the type 
<code>sys:store_root</code>. The root node can have one or more child nodes, such as the Company Home folder node. Each node has a 
primary path to a parent node and the following metadata:</p>

<ul>
  <li><strong>Type</strong>: a node is of one type, such as Folder, File, Marketing Document, Rule, Calendar Event, Discussion, Data List and so on.</li>
  <li><strong>Aspects</strong>: a node can have many aspects applied, such as Versioned, Emailed, Transformed, Classified, Geographic and so on.</li>
  <li><strong>Properties</strong>: both types and aspects define 
properties. If it is a file node then one of the properties points to 
the physical file in the content store.</li>
  <li><strong>Permissions</strong>: access control settings for the node.</li>
  <li><strong>Associations</strong>: relationships to other nodes (peer or child).</li>
</ul>

<h4 class="is-collected" data-originalid="node-reference"><a id="node-reference" data-header="H4" class="is-hidden"></a>Node Reference<a class="button" href="#node-reference"></a></h4>
<p>A node is uniquely identified in the Repository via its <strong>node reference</strong>, also commonly referred to as <code>NodeRef</code>. 
A node reference points to a store and a node in that store. A node reference has the following format: 
<code>{store protocol://store identifier}/UUID</code> such as for example <code>workspace://SpacesStore/986570b5-4a1b-11dd-823c-f5095e006c11</code>. 
The first part is the store reference and the second part is a Universally Unique Identifier (UUID) for that store. 
Node references are used a lot in the available APIs so it is good to have an idea of how they are constructed.</p>

<h4 class="is-collected" data-originalid="node-properties"><a id="node-properties" data-header="H4" class="is-hidden"></a>Node Properties<a class="button" href="#node-properties"></a></h4>
<p>The node properties, also referred to as the node’s <strong>metadata</strong>, contains the majority of the information for a node. 
The <code>sys:store-protocol</code>, <code>sys:store-identifier</code>, and <code>sys:node-uuid</code> properties contains all the data needed to 
construct the NodeRef, uniquely identifying the node. The special property called <code>cm:content</code> points to where the 
physical content file is stored on disk (unless it is a folder or other contentless node type). All properties are 
either contained in a type or in an aspect defined in a content model. When a node is created some properties are 
automatically set by the system and cannot be easily changed, they are called <strong>audit properties</strong> 
(from the <code>cm:auditable</code> aspect) and are Created Date, Creator, Modified Date, Modifier, and Accessed. Defining new 
domain specific node properties, together with the types and aspects that contain them, is the primary way of classifying 
a node so it can be easily found via searches.</p>

<h4 class="is-collected" data-originalid="metadataproperty-extractors"><a id="metadataproperty-extractors" data-header="H4" class="is-hidden"></a>Metadata/Property Extractors<a class="button" href="#metadataproperty-extractors"></a></h4>
<p>Some of the properties of a file node are set automatically when it is uploaded to the Repository, such as <em>author</em>. 
This is handled by <strong>metadata extractors</strong>. A metadata extractor is set up to extract properties from a specific file 
MIME type. There are numerous metadata extractors available out-of-the-box covering common MIME types such as MS Office 
document types, PDFs, Emails, JPEGs, HTML files, DWG files and more. The metadata extractors are implemented via the 
Tika library, although custom metadata extractors are available. Each metadata extractor implementation has a mapping 
between the properties it can extract from the content file, and what content model properties that should be set as 
node metadata.</p>

<h4 class="is-collected" data-originalid="node-associations"><a id="node-associations" data-header="H4" class="is-hidden"></a>Node Associations<a class="button" href="#node-associations"></a></h4>
<p>There are two types of associations:</p>

<ul>
  <li><strong>Parent</strong> to <strong>Child</strong> associations - these are for example folder to file associations where deleting the folder 
will cascade delete its children.</li>
  <li><strong>Peer</strong> to <strong>Peer</strong> - an example could be article to image associations where deleting the article does not affect 
the related image node(s). These associations are also referred to as source to target associations.</li>
</ul>

<h4 class="is-collected" data-originalid="qname"><a id="qname" data-header="H4" class="is-hidden"></a>QName<a class="button" href="#qname"></a></h4>
<p>All properties are defined within a specific content model, which also defines a unique <strong>namespace</strong>. For example, a 
property called <code>description</code> can be part of many namespaces (content models). To uniquely identify what <code>description</code> 
property is being referenced, a fully qualified name, or a <code>QName</code>, is used. A QName has the following format: 
<code>{namespace URL}property local name</code>, for example:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-text hljs plaintext">{http://www.alfresco.org/model/content/1.0}description
</code></pre>

<p>The first part in curly braces is the namespace identifier defining the content model that the property is part of. 
The second part is the local name of the property (that is <em>description</em> in this case).</p>

<p>A QName is used for types, aspects, properties, associations, constraints and so on. The QName for the generic folder 
type that is part of the out-of-the-box document content model is <code>cm:folder</code>. Note the use of <code>cm</code> to denote the namespace. 
Each content model defines a prefix for each namespace that is used in the content model. Each type, aspect, property 
and so on in the content model definition uses the namespace prefix instead of the full namespace URL. You will also 
use the prefix when referring to entities such as types, aspects, properties, in the different APIs.</p>

<h4 class="is-collected" data-originalid="permissions"><a id="permissions" data-header="H4" class="is-hidden"></a>Permissions<a class="button" href="#permissions"></a></h4>
<p>Permissions are set up per node and a node can inherit permissions from its parent node. A Role (Group) Based Access 
Control configuration is the preferred way to set up permissions in the repository. However, permissions can also be 
set for an individual user. Groups and users can be synchronized with an external directory such as LDAP or MS Active 
Directory. Some groups are created automatically during installation:</p>

<p>TODO: add some new roles…</p>

<ul>
  <li><strong>EVERYONE</strong> – all users in the system</li>
  <li><strong>ALFRESCO_ADMINISTRATORS</strong> – administrators with full access to everything in the Repository.</li>
  <li><strong>ALFRESCO_SEARCH_ADMINISTRATORS</strong> – can access the Search Manager tool and set up search filters (facets).</li>
  <li><strong>SITE_ADMINISTRATORS</strong> – can access the Site Manager tool and change visibility of sites, delete sites, and perform site related operations.</li>
  <li><strong>E-MAIL_CONTRIBUTORS</strong> – users that can send email with content into Alfresco Content Services.</li>
</ul>

<p>Permission settings involve three entities:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-repository-concepts-permission-mapping.png" alt=""></p>

<p>There are a number of out-of-the-box roles:</p>

<ol>
  <li>Consumer</li>
  <li>Contributor</li>
  <li>Editor</li>
  <li>Collaborator</li>
  <li>Coordinator</li>
</ol>

<p>Whenever a Share site is created there are also four associated groups created that are used to set up permissions 
within the site. In the repository, groups are prefixed with <code>GROUP_</code> and roles with <code>ROLE_</code>, this is important when 
referring to a group or role when using one of the APIs.</p>

<p><strong>Important:</strong> A <strong>Site</strong> is a collaboration area in Alfresco Share where a team of people can collaborate on content.</p>

<h4 class="is-collected" data-originalid="owner"><a id="owner" data-header="H4" class="is-hidden"></a>Owner<a class="button" href="#owner"></a></h4>
<p>The Repository contains a special authority called owner. Whoever creates a node in the repository is called the owner 
of the node. Owner status overrides any other permission setting. As owner you can do any operation on the node 
(basically the same as being coordinator/admin). Anyone with Coordinator or Admin status can take ownership of a node 
(<code>cm:ownable</code> is then applied).</p>

<h4 class="is-collected" data-originalid="folder-node-and-file-node-overview"><a id="folder-node-and-file-node-overview" data-header="H4" class="is-hidden"></a>Folder Node and File Node Overview<a class="button" href="#folder-node-and-file-node-overview"></a></h4>
<p>The diagram illustrates a typical folder node with a child file node when it has been classified with the out-of-the-box 
default document content model:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-repository-concepts-folder-file-node-overview.png" alt=""></p>

<h2 class="is-collected" data-originalid="platformarch"><a id="platformarch" data-header="H2" class="is-hidden"></a>Platform architecture<a class="button" href="#platformarch"></a></h2>
<p>The platform architecture consists of the repository and related services. The platform contains the key extension points 
for building your own extensions.</p>

<p>The following diagram illustrates the platform architecture and the <a href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/">in-process extension points</a>
and the <a href="https://docs.alfresco.com/content-services/latest/develop/oop-ext-points/">out-of-process extension points</a>.
Note that this does not represent a complete list of all in-process extension points:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/acs-platform-architecture-detail.png" alt="acs-platform-architecture-detail"></p>

<p>The platform consists of the repository and all services, developer extension points,
and APIs, such as the <a href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/">ReST API</a>.
The repository provides storage for documents and other content. The content metadata
is stored in a relational database, while the content itself is stored directly on the file system. The relationships 
between content items, and their various properties (metadata) are defined in one or more 
<a href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/content-model/">content models</a>.</p>

<p>Content models can be thought of as describing types of content and the relationships between pieces of content. 
For example, there is a relationship between a content that has a container functionality (that is, folder), and the 
piece of content contained within it (that is, sub-folders and files). There might be constraints defined in the 
content model, such as a content type cannot contain other content unless it is a container type.</p>

<p>As well as the basic content storage functionality, the platform provides a wide range of content-related services. 
These include core services such as the Node Service, and the Version Service. There are also higher-level services 
such as Thumbnail Service (for creating thumbnail images and renditions of documents), the Site Service used for 
creating and managing sites in the Share application, and the Tagging Service, which provides the ability to tag 
content with keywords. The following sections of this documentation provide a brief tour of the available services.</p>

<p>Typically these services are implemented in Java, and expose an API described by the 
<a href="https://docs.alfresco.com/content-services/latest/develop/reference/java-foundation-ref/">Public Java API</a>.</p>

<p>The platform is highly extensible. You can write extensions in Java, JavaScript, and FreeMarker, and you can write 
client applications in any language using the <a href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/">ReST API</a>. You can create new
<a href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/content-model/">content models</a> that define new content types, metadata,
and relationships. You can define <a href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/repo-actions/">custom actions</a> that the repository
will carry out when certain events happen (such as when new content is added to the repository). You can even create 
entirely new services, if required.</p>

<p>When you need to create custom business workflow you should use the 
<a href="https://docs.alfresco.com/process-services/latest/">Alfresco Process Services (APS)</a> product.</p>

<h3 class="is-collected" data-originalid="content-modeling"><a id="content-modeling" data-header="H3" class="is-hidden"></a>Content modeling<a class="button" href="#content-modeling"></a></h3>
<p>Content modeling is a fundamental building block of the repository that provides a foundation for structuring and 
working with content.</p>

<p>Content modeling specifies how nodes stored in the repository are constrained, imposing a formal structure on nodes
that an application can understand and enforce. Nodes can represent anything stored in the repository, such as folders, 
documents, XML fragments, renditions, collaboration sites, and people. Each node has a unique ID and is a container for 
any number of named properties, where property values can be of any data type, single or multi-valued.</p>

<p>Nodes are related to each other through relationships. A parent/child relationship represents a hierarchy of nodes where 
child nodes cannot outlive their parent. You can also create arbitrary relationships between nodes and define different 
types of nodes and relationships.</p>

<p>A content model defines how a node in the repository is constrained. Each model defines one or more types, where a type 
enumerates the properties and relationships that a node of that type can support. Often, concepts that cross multiple 
types of node must be modeled, which the repository supports through aspects. Although a node can only be of a single type, 
you can apply any number of aspects to a node. An aspect can encapsulate both data and process, providing a flexible tool 
for modeling content.</p>

<p>Content modeling puts the following constraints on the data structure:</p>

<ul>
  <li>A node must be of a given kind.</li>
  <li>A node must carry an enumerated set of properties.</li>
  <li>A property must be of a given data type.</li>
  <li>A value must be within a defined set of values.</li>
  <li>A node must be related to other nodes in a particular way.</li>
</ul>

<p>These constraints allow the definition (or modeling) of entities within the domain. For example, many applications are 
built around the notion of folders and documents. It is content modeling that adds meaning to the node data structure.</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/5-1.png" alt="folder and doc modelling"></p>

<p>The repository provides services for reading, querying, and maintaining nodes. Events are fired on changes, allowing for 
processes to be triggered. In particular, the repository provides the following capabilities based on events:</p>

<ul>
  <li><strong>Policies</strong>: event handlers registered for specific kinds of node events for either all nodes or nodes of a specific type</li>
  <li><strong>Rules</strong>: declarative definition of processes based 
on addition, update, or removal of nodes (for example, the equivalent of
 email rules)</li>
</ul>

<p>Models also define kinds of relationships, property data types, and value constraints. A special data type called <code>content</code> 
allows a property to hold arbitrary length binary data. Content Services comes prepackaged with several content models. 
You can define new models for specific use cases from scratch or by inheriting definitions from existing models.</p>

<p>For more information see <a href="https://docs.alfresco.com/content-services/latest/develop/repo-ext-points/content-model/">content model introduction</a>.</p>

<h3 class="is-collected" data-originalid="access-protocols"><a id="access-protocols" data-header="H3" class="is-hidden"></a>Access protocols<a class="button" href="#access-protocols"></a></h3>
<p>Content Services supports a number of different protocols for accessing the content repository. Their 
availability extends the options available to developers, when building their own applications and extensions.</p>

<p>Protocols provide developers with another possible avenue for building their own applications and extensions. For example, 
if you are building a client application to connect with multiple repositories from multiple vendors, including 
Content Services, then CMIS is a consideration. If you are building a client to connect via the SharePoint Protocol, 
then use the Alfresco Office Services (AOS). Protocols provide a resource for developers, in addition to the numerous other 
extension points and APIs built into Alfresco.</p>

<p>When any of these protocols are used to access or upload content to the repository, access control is always enforced 
based on configured permissions, regardless of what protocol that is used.</p>

<p>The following table list some of the main protocols supported by Content Services:</p>

<div class="content-table-wrapper"><table>
  <thead>
    <tr>
      <th>Protocol</th>
      <th>Description</th>
      <th>Support Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>HTTP</td>
      <td>The main protocol used to access the repository via for example the ReST APIs.</td>
      <td>Standard in Content Services and Community Edition.</td>
    </tr>
    <tr>
      <td>WebDAV</td>
      <td>Web-based Distributed Authoring and Versioning is a set of 
HTTP extensions that lets you manage files collaboratively on web 
servers. It has strong support for authoring scenarios such as locking, 
metadata, and versioning. Many content production tools, such as the 
Microsoft Office suite, support WebDAV. Additionally, there are tools 
for mounting a WebDAV server as a network drive.</td>
      <td>Standard in Content Servicesand Community Edition.</td>
    </tr>
    <tr>
      <td>FTP</td>
      <td>File Transfer Protocol - standard network protocol for file 
upload, download and manipulation. Useful for bulk uploads and 
downloads.</td>
      <td>Standard in Content Services and Community.</td>
    </tr>
    <tr>
      <td>Alfresco Office Services</td>
      <td>Alfresco Office Services (AOS) allow you to access Content Services directly from all your Microsoft Office applications.</td>
      <td>Standard in Content Services and Community Edition.</td>
    </tr>
    <tr>
      <td>CMIS</td>
      <td>Alfresco fully implements both the <a href="https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=cmis" target="_blank">CMIS</a>. 1.0 and 1.1 standards to allow your application to manage content and metadata in an on-premise repository.</td>
      <td>Standard in Content Services and Community Edition.</td>
    </tr>
    <tr>
      <td>IMAP</td>
      <td>Internet Message Access Protocol - allows access to email on a
 remote server. Content Services can present itself as an email server, 
allowing clients such as Microsoft Outlook, Thunderbird, Apple Mail and 
other email clients to access the content repository, and manipulate 
folders and files contained there. IMAP supports three modes of 
operation:<br><br>1. <code>Archive</code>: allows email storage in the repository by using drag/drop and copy/paste from the IMAP client.<br><br>2. <code>Virtual</code>:
 folders and files held in the repository are exposed as emails within 
the IMAP client with the ability to view metadata and trigger actions 
using links embedded in the email body.<br><br>3. <code>Mixed</code>: a combination of both archive and virtual.</td>
      <td>Standard in Content Services and Community Edition.</td>
    </tr>
    <tr>
      <td>SMTP</td>
      <td>It is possible to email content into the repository (InboundSMTP). A folder can be dedicated as an email target.</td>
      <td>Standard in Content Services and Community Edition.</td>
    </tr>
  </tbody>
</table></div>

<p>All the protocol bindings expose folders and documents held in the repository. This means a client tool accessing the 
repository using the protocol can navigate through folders, examine properties, and read content. Most protocols also 
permit updates, allowing a client tool to modify the folder structure, create and update documents, and write content. 
Some protocols also allow interaction with capabilities such as version histories, search, and tasks.</p>

<p>Internally, the protocol bindings interact with the repository services, which encapsulate the behavior of working with 
folders and files. This ensures a consistent view and update approach across all client tools interacting with the 
content application server.</p>

<p>A subsystem for file servers allows configuration and lifecycle management for each of the protocols either through 
property files or JMX.</p>

<h3 class="is-collected" data-originalid="modularity"><a id="modularity" data-header="H3" class="is-hidden"></a>Modularity<a class="button" href="#modularity"></a></h3>
<p>The Content Services system is modular. Every moving part is encapsulated as a service, where each service 
provides an external face in a formally defined interface and has one or more black-box implementations.</p>

<p>The system is designed this way to allow for:</p>

<ul>
  <li>Pick and mix of services for building an ECM solution</li>
  <li>Reimplementation of individual services</li>
  <li>Multiple implementations of a service, where the appropriate 
implementation is chosen based on the context within which the solution 
is executed</li>
  <li>A pattern for extending Content Services (at design and runtime)</li>
  <li>Easier testing of services</li>
</ul>

<p>To support this approach, Content Services used the Spring framework for its factory, Dependency Injection, 
and Aspect-Oriented Programming (AOP) capabilities. Services are bound together through their interfaces and configured 
using Spring’s declarative Dependency Injection:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/2-5.png" alt="subsystem interface"></p>

<p>A service interface is defined as a Java interface. For services that
 form the internal embedded API for extensions, 
cross-cutting concerns such as transaction demarcation, access control, 
auditing, and logging are plugged 
in through Spring AOP behind the service interface. This means that 
service implementations are not polluted with these concerns. 
It also means the cross-cutting concerns can be configured independently
 or even switched off across the server if, for example, 
performance is the top-most requirement and the feature is not 
necessary.</p>

<p>Multiple services are aggregated into a Content Services subsystem where a subsystem represents a complete 
coherent capability of the Content Services server, such as authentication, transformation, and protocols. 
As a unit, subsystems have their own lifecycle where they can be shut down and restarted while the server is running. 
This is useful to disable aspects of the server, or reconfigure parts of it, such as how LDAP synchronization is mapped. 
Each subsystem supports its own administration interface that is accessible through property files or JMX.</p>

<h2 class="is-collected" data-originalid="web-ui-architecture"><a id="web-ui-architecture" data-header="H2" class="is-hidden"></a>Web UI architecture<a class="button" href="#web-ui-architecture"></a></h2>
<p>The Web UI architecture consists of a number of web clients and the Application Development Framework (ADF).</p>

<p>This section covers the Web UI architecture in detail. There are a number of web clients available when accessing the 
repository. There is also the Application Development Framework that can be used to build domain specific web applications.</p>

<h3 class="is-collected" data-originalid="customizing-the-user-interface"><a id="customizing-the-user-interface" data-header="H3" class="is-hidden"></a>Customizing the user interface<a class="button" href="#customizing-the-user-interface"></a></h3>
<p>Alfresco offers two content management web clients that can be used right out-of-the box:</p>

<ul>
  <li><strong><a href="https://docs.alfresco.com/content-services/latest/using/share/">Alfresco Share</a></strong>
 - the traditional web client that are still heavily used, but it is 
based on some technology that might not be well known among developers.</li>
  <li><strong><a href="https://docs.alfresco.com/digital-workspace/latest/">Digital Workspace</a></strong>
 - the newer web client that are based on the well known Angular 
JavaScript framework. This web client is also built with components from
 the Alfresco Application Development Framework (ADF).</li>
</ul>

<p>When developing (customizing) the user interface for your domain specific content management solution follow this approach:</p>

<ol>
  <li>Check if your customizations can be done to the <a href="https://docs.alfresco.com/digital-workspace/latest/develop/extensions/">Digital Workspace client</a>, this is usually the case when dealing with most customizations.</li>
  <li>When faced with more complex UI customizations where you would see
 that most of the Digital Workspace UI would have to change, develop a 
custom UI on top of <a href="#adf">Alfresco ADF</a>.</li>
</ol>

<h3 class="is-collected" data-originalid="adf"><a id="adf" data-header="H3" class="is-hidden"></a>Application Development Framework (ADF)<a class="button" href="#adf"></a></h3>
<p>This section gives an introduction to the Alfresco Application Development Framework (ADF), which is used to build 
custom domain specific Web UIs that should manage content and processes in the Alfresco content repository.</p>

<h4 class="is-collected" data-originalid="overview-1"><a id="overview-1" data-header="H4" class="is-hidden"></a>Overview<a class="button" href="#overview-1"></a></h4>
<p>The <a href="https://www.alfresco.com/abn/adf/docs/" target="_blank">Alfresco Application Development Framework</a>, 
referred to as ADF, is built on top of the Angular JavaScript framework. You can think of ADF as a library of 
<a href="https://www.alfresco.com/abn/adf/docs/core/components/info-drawer-tab.component/" target="_blank">Alfresco web components</a> 
that can be used to build a content management web application and/or a process management web application.</p>

<p>There are a number of web components that you can use to integrate your web application with Content Services (ACS). 
Here are some of these components:</p>

<ul>
  <li><strong>Folder Hierarchy Breadcrumbs</strong> - display a breadcrumb with clickable folder path</li>
  <li><strong>Document List</strong> - list folders and files</li>
  <li><strong>Search</strong> - search folders and files</li>
  <li><strong>Tag</strong> - manage and list tags</li>
  <li><strong>Upload</strong> - upload files via button or drag-and-drop</li>
  <li><strong>Viewer</strong> - preview files in the browser</li>
  <li><strong>Webscript</strong> - call a Web Script (i.e. a ReST call)</li>
</ul>

<p>And for integrating with Alfresco Process Services (APS) you have the following components:</p>

<ul>
  <li><strong>Analytics</strong> - display graph reports such as process instance overview</li>
  <li><strong>Diagram</strong> - show process definition diagram, if 
associated with running process instance then the activities are 
highlighted according to their state</li>
  <li><strong>Process Apps</strong> - shows a list of process applications</li>
  <li><strong>Process List</strong> - show a list of process instances</li>
  <li><strong>Process Details</strong> - multiple components are available to show different details for a process</li>
  <li><strong>Task List</strong> - show a list of task instances for a process instance(s)</li>
  <li><strong>Task Details</strong> - multiple components are available to show different details for a task</li>
</ul>

<p>There are also a number of generic components that are used with both ACS and APS:</p>

<ul>
  <li><strong>Breadcrumbs</strong> - indicates the current position within a navigation hierarchy</li>
  <li><strong>Toolbar</strong> - an extension to the Angular Material toolbar with a title and color</li>
  <li><strong>Accordion</strong> - creates a collapsible accordion menu</li>
  <li><strong>Card View</strong> - displays properties in a nice layout</li>
  <li><strong>Data Table</strong> - generic data table implementation that is used by, for example, Document List</li>
  <li><strong>Drag-and-Drop</strong> - Drag and drop files into for example a folder</li>
  <li><strong>Form</strong> - display properties from nodes, tasks, and other sources in a form defined in JSON</li>
  <li><strong>Login</strong> - authenticates with both services</li>
  <li><strong>User Info</strong> - display information about a user</li>
</ul>

<p>For a complete list of all components with documentation see the <a href="https://www.alfresco.com/abn/adf/docs/core/components/info-drawer-tab.component/" target="_blank">ADF Component Catalogue</a> .</p>

<h4 class="is-collected" data-originalid="architecture"><a id="architecture" data-header="H4" class="is-hidden"></a>Architecture<a class="button" href="#architecture"></a></h4>
<p>These ADF components don’t talk directly to the ACS and APS backend services. There are some layers between them that 
are worth knowing about before you start coding. The ADF components talk to ADF services, which in turn talks to the 
<a href="https://github.com/Alfresco/alfresco-js-api" target="_blank">Alfresco JS API</a> , which internally calls ACS and APS via their respective 
ReST APIs. You could use the both the ADF services and the Alfresco JS API directly from your application if there is no 
ADF component available to do what you want. In fact, you will quite frequently have to use the ADF services in your 
application to fetch content nodes, process instances, task instances etc.</p>

<p>The following picture illustrates the architecture of an ADF solution:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/adf-architecture.png" alt="adf-architecture"></p>

<p>The ADF components and services are implemented in Angular, which in turn is implemented in TypeScript. The Alfresco 
JavaScript library is pure JavaScript and could be used with any other JavaScript framework.</p>

<h4 class="is-collected" data-originalid="application-generator"><a id="application-generator" data-header="H4" class="is-hidden"></a>Application Generator<a class="button" href="#application-generator"></a></h4>
<p>There is an <a href="https://github.com/Alfresco/generator-alfresco-adf-app" target="_blank">ADF application generator</a> that 
can be very useful if you just want to quickly get going with an ADF project, such as for a demo or proof-of-concept scenario. 
It covers use cases for both ACS and APS. It can be used to generate the following types of ADF applications:</p>

<ul>
  <li>ADF Content Management App (use this template if your app is only going to talk to ACS)</li>
  <li>ADF Process Management App (use this template if your app is only going to talk to APS)</li>
  <li>ADF Content and Process Management App</li>
</ul>

<p>Using the App Generator is simple. Install the <a href="https://yeoman.io/" target="_blank">Yeoman</a> tool. 
Then install the App Generator as follows:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-bash hljs">$ sudo npm install generator-alfresco-adf-app -g
Password:
+ generator-alfresco-adf-app@2.3.0
added 243 packages <span class="hljs-keyword">in</span> 5.438s                  
</code></pre>

<p>Running the generator is easy:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-bash hljs">$ yo
? <span class="hljs-string">'Allo Martin! What would you like to do? (Use arrow keys)
  Run a generator
❯ Alfresco Adf App 
  ──────────────
  Update your generators 
  Install a generator 
  Find some help 
  Clear global config             
          
</span></code></pre>

<p>Select the ‘Alfresco Adf App’ generator and follow instructions.</p>

<h3 class="is-collected" data-originalid="alfresco-javascript-api"><a id="alfresco-javascript-api" data-header="H3" class="is-hidden"></a>Alfresco JavaScript API<a class="button" href="#alfresco-javascript-api"></a></h3>
<p>The Alfresco JavaScript API is not normally used directly. Instead the Alfresco Application Development Framework (ADF) 
is used, which uses the JavaScript API indirectly. But there are situations when it might be necessary to use the 
JavaScript API directly, such as when ADF cannot be used. ADF is based on Angular and if another JavaScript library 
such as React has been adopted, then it is beneficial to use the Alfresco JavaScript API directly from React.</p>

<p>The Alfresco JavaScript library abstracts the Content Services (ACS) ReST API and the 
Alfresco Process Services (APS) ReST API, so a lot of work has been done to make it smooth to use the 
Alfresco ReST APIs from a third party JavaScript library. For example, authentication with both ACS and APS is 
handled automatically by the Alfresco JavaScript library.</p>

<p>For more information about the Alfresco JavaScript API, and examples of how to use it, have a look 
<a href="https://github.com/Alfresco/alfresco-js-api" target="_blank">here</a>.</p>

<h3 class="is-collected" data-originalid="sharearchitecture"><a id="sharearchitecture" data-header="H3" class="is-hidden"></a>Share Web Client architecture<a class="button" href="#sharearchitecture"></a></h3>
<p>When developing for Share it is important to understand the application architecture and the underlying development frameworks. 
It is also important to know what extension points that are available to you for customizing the UI in a supported way.</p>

<h4 class="is-collected" data-originalid="introduction"><a id="introduction" data-header="H4" class="is-hidden"></a>Introduction<a class="button" href="#introduction"></a></h4>
<p>Alfresco Share (<code>share.war</code>) is a web application that runs on the Java Platform. In a development environment it is 
usually deployed and run on top of Apache Tomcat. Share is built up of a main menu that leads to pages, which is 
similar to most other web applications that you might come across. However, there is one special page type called 
Dashboard that contains dashlets. A Dashboard page can be configured by the end-user, who can add, remove, and organize 
the dashlets on the page.</p>

<p>Share pages and dashlets are implemented with something called web scripts, which is basically REST-based APIs. These 
APIs are called Surf web scripts when you are dealing with Alfresco Share. There is also repository web scripts that 
are used to extend the repository web application (alfresco.war) with REST-based APIs. Surf Web Scripts are referred to 
as <em>Presentation Web Scripts</em> and the repository web scripts as <em>Data Web Scripts</em>.</p>

<p>Share web scripts, pages, and dashlets are implemented with a user interface (UI) development framework called Surf. 
This framework was originally developed by Alfresco, then donated to the Spring Source foundation, and finally brought 
back into Alfresco products. It provides a way of breaking a HTML page into re-usable component parts. Surf is built on 
top of the Spring Web MVC technology, which in turn uses the Spring Framework.</p>

<p>Developers can also add completely new pages and dashlets to the Share UI when content should be viewed or handled in a 
specific way. Sometimes it is also required to modify existing pages. To customize the Share UI developers use so called 
<em><a href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/">Extension Points</a></em>, which are supported ways of injecting new
custom code that should alter the functionality of the Share web application.</p>

<p>The following picture gives an overview of the Alfresco Share application architecture, note that not all available 
extension points are illustrated in this picture:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-extensions-share-architecture.png" alt="dev-extensions-share-architecture"></p>

<p>Share gets the content that it should display in pages and dashlets by calling repository web scripts, which returns 
JSON or XML that can be incorporated into the presentation. The presentation is actually put together with two different 
kinds of JavaScript frameworks, Yahoo UI library (YUI) and Aikau, which is based on Dojo. An Aikau page is based on 
Surf but it makes page composition much easier than with pure Surf pages.</p>

<p>You can focus solely on Aikau if the only thing you are going to do is add new stuff to the Share UI. However, if you need 
to alter behavior of existing pages, then you might also need to get up to speed on the details of the Surf page model, 
as only the following has been converted to Aikau:</p>

<ul>
  <li>Share Header Menu and Title (4.2)</li>
  <li>Live Search (5.0)</li>
  <li>Filtered Search Page (5.0)</li>
  <li>Search Management Page (5.0)</li>
  <li>Site Management Page (5.0)</li>
  <li>Analytics and Reporting Widgets (5.0)</li>
  <li>Document List prototype (5.0)</li>
</ul>

<p>The following sections get into a bit more details around Surf pages and Aikau pages.</p>

<h4 class="is-collected" data-originalid="surf-framework"><a id="surf-framework" data-header="H4" class="is-hidden"></a>Server Side Framework (Surf)<a class="button" href="#surf-framework"></a></h4>
<p>The layout of a Share page is defined with the Surf development framework, which is a server side framework 
(<a href="https://docs.alfresco.com/content-services/latest/develop/reference/surf-framework-ref/">Surf deep dive</a>). This means that the
involved files are processed on the server side (compared to Browser processing of JavaScript files). Surf is based on
the Model View Controller (MVC) pattern where the controller(s) is mostly implemented in server side JavaScript
(The Rhino JavaScript engine is included on the server side). The template is written in FreeMarker, and the model is a
hash map that is set up in the controller(s) and available in the template.</p>

<p>Each page template defines one or more regions for things like header, footer, body, navigation, see the following picture:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-extensions-share-surf-template.png" alt="dev-extensions-share-surf-template"></p>

<p>To be able to reuse regions we can scope them to page, template, or global usage:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-extensions-share-surf-template-scopes.png" alt="dev-extensions-share-surf-template-scopes"></p>

<p>Each region is implemented as a reusable component. A component implementation is done with a Surf web script, which is 
the same thing as the REST-based request and response model, the predominant Web Service design model. The component 
web scripts will typically return HTML fragments that make up different parts of the page:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-extensions-share-surf-template-components.png" alt="dev-extensions-share-surf-template-components"></p>

<p>With all these different objects we might expect there to be some form of model that makes up the whole Surf UI 
development framework. It looks like this:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-extensions-share-surf-page-model.png" alt="dev-extensions-share-surf-page-model"></p>

<p>The model is referred to as the <code>siteData</code> and has more stuff than just pages and templates 
(<a href="https://docs.alfresco.com/content-services/latest/develop/reference/surf-framework-ref/">Surf Reference</a>). You will however mostly be dealing with component,
page, and template-instance files, which are simple XML files:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-text hljs plaintext">/WEB-INF/classes/alfresco
  /site-data
    /chrome
    /components
      ...
      global.header.xml
    /component-types
    /configurations
    /content-associations
    /extensions
    /page-associations
    /pages
      ...
      documentlibrary.xml
      ...
      search.xml
      ...
      task-details.xml
      ...
    /page-types
    /template-instances
        1-column.xml
        2-columns.xml
        3-columns.xml
        ...
        content-viewer.xml
        ...
        search.xml
        ...
    /template-types
    /themes
</code></pre>

<p>The Site Data model defines the page in XML, like in the following
example for Search (<code>alfresco/tomcat/webapps/share/WEB-INF/classes/alfresco/site-data/pages/search.xml</code>):</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">page</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Search<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">title-id</span>&gt;</span>page.search.title<span class="hljs-tag">&lt;/<span class="hljs-name">title-id</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Search view<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">description-id</span>&gt;</span>page.search.description<span class="hljs-tag">&lt;/<span class="hljs-name">description-id</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">template-instance</span>&gt;</span>search<span class="hljs-tag">&lt;/<span class="hljs-name">template-instance</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">authentication</span>&gt;</span>user<span class="hljs-tag">&lt;/<span class="hljs-name">authentication</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">components</span>&gt;</span>

      <span class="hljs-comment">&lt;!-- Title --&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span>
         <span class="hljs-tag">&lt;<span class="hljs-name">region-id</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">region-id</span>&gt;</span>
         <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>/components/title/search-title<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span>

      <span class="hljs-comment">&lt;!-- Search --&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span>
         <span class="hljs-tag">&lt;<span class="hljs-name">region-id</span>&gt;</span>search<span class="hljs-tag">&lt;/<span class="hljs-name">region-id</span>&gt;</span>
         <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>/components/search/search<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span>

   <span class="hljs-tag">&lt;/<span class="hljs-name">components</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">page</span>&gt;</span>
</code></pre>

<p>Here we can see that some components have been defined inline
in the search page definition, instead of in the <code>/components</code> directory as separate files. The name of the page 
definition file is implicitly setting the page id to <code>search</code>. A corresponding 
template instance file is expected to be present in
the <code>template-instances</code> directory. In our case it will be a file called <code>search.xml</code>:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template-instance</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">template-type</span>&gt;</span>org/alfresco/search<span class="hljs-tag">&lt;/<span class="hljs-name">template-type</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template-instance</span>&gt;</span>
</code></pre>

<p>It will have a link to the physical template that contains the layout of the page. The template files are located under 
a different directory called <code>/templates</code>, which is on the same level as the <code>site-data</code> directory:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-text hljs plaintext">/WEB-INF/classes/alfresco
  /site-data
  /templates
    /org
      /alfresco
        1-column.ftl
        2-columns.ftl
        3-columns.ftl
        ...
        content-viewer.ftl
        ...
        search.ftl
        ...
</code></pre>

<p>The <code>search.ftl</code> template file looks like this with the regions etc:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-name">#include</span> "<span class="hljs-attr">include</span>/<span class="hljs-attr">alfresco-template.ftl</span>" /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">@templateHeader</span> /&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">@templateBody</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alf-hd"</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alf-hd"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">@region</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"global"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"share-header"</span> <span class="hljs-attr">chromeless</span>=<span class="hljs-string">"true"</span>/&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bd"</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bd"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"yui-t1"</span>&gt;</span>
         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"yui-main"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">@region</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"search"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"page"</span> /&gt;</span>
         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">@templateFooter</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alf-ft"</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alf-ft"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">@region</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"footer"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"global"</span> /&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
</code></pre>

<p>The search page reuses the global header and footer components and then defines a page specific region called search. 
The web script to call for the search component is already defined in the page definition XML above (that is, 
<code>/components/search/search</code>). The controller file for the search Web Script looks like this 
(<code>alfresco/tomcat/webapps/share/WEB-INF/classes/alfresco/site-webscripts/components/search/search.get.js</code>):</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-javascript hljs"><span class="hljs-comment">/**
 * Search component GET method
 */</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>)
</span>{
   <span class="hljs-comment">// fetch the request params required by the search component template</span>
   <span class="hljs-keyword">var</span> siteId = (page.url.templateArgs[<span class="hljs-string">"site"</span>] != <span class="hljs-literal">null</span>) ? page.url.templateArgs[<span class="hljs-string">"site"</span>] : <span class="hljs-string">""</span>;
   <span class="hljs-keyword">var</span> siteTitle = <span class="hljs-literal">null</span>;
   <span class="hljs-keyword">if</span> (siteId.length != <span class="hljs-number">0</span>)
   {
      <span class="hljs-comment">// Call the repository for the site profile</span>
      <span class="hljs-keyword">var</span> json = remote.call(<span class="hljs-string">"/api/sites/"</span> + siteId);
...
</code></pre>

<p>This is server side JavaScript code that sets up a model with data for the template. The template looks like this 
(<code>alfresco/tomcat/webapps/share/WEB-INF/classes/alfresco/site-webscripts/components/search/search.get.html.ftl</code>):</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"css"</span> &gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">#--</span> <span class="hljs-attr">CSS</span> <span class="hljs-attr">Dependencies</span> <span class="hljs-attr">--</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"${url.context}/res/components/search/search.css"</span> <span class="hljs-attr">group</span>=<span class="hljs-string">"search"</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"js"</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">#--</span> <span class="hljs-attr">JavaScript</span> <span class="hljs-attr">Dependencies</span> <span class="hljs-attr">--</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"${url.context}/res/components/search/search-lib.js"</span> <span class="hljs-attr">group</span>=<span class="hljs-string">"search"</span>/&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"${url.context}/res/components/search/search.js"</span> <span class="hljs-attr">group</span>=<span class="hljs-string">"search"</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"widgets"</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@createWidgets</span> <span class="hljs-attr">group</span>=<span class="hljs-string">"search"</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"html"</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@uniqueIdDiv</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">#assign</span> <span class="hljs-attr">el</span>=<span class="hljs-string">args.htmlid</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">#assign</span> <span class="hljs-attr">searchconfig</span>=<span class="hljs-string">config.scoped[</span>'<span class="hljs-attr">Search</span>']['<span class="hljs-attr">search</span>']&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"${el}-body"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"search"</span>&gt;</span>
         <span class="hljs-tag">&lt;<span class="hljs-name">#assign</span> <span class="hljs-attr">context</span>=<span class="hljs-string">searchconfig.getChildValue(</span>'<span class="hljs-attr">repository-search</span>')!"<span class="hljs-attr">context</span>"&gt;</span>
         <span class="hljs-tag">&lt;<span class="hljs-name">#if</span> <span class="hljs-attr">searchQuery</span>?<span class="hljs-attr">length</span> == <span class="hljs-string">0</span> &amp;&amp; <span class="hljs-attr">context</span> != <span class="hljs-string">"always"</span>&gt;</span>
         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"search-sites"</span>&gt;</span>
...
</code></pre>

<p>The template is where we will find references to client side code/resources. The <code>css</code> and <code>js</code> sections above points 
to the client side CSS and JS that should be part of the <code>&lt;head&gt;</code> section in the web page, and downloaded and executed 
by the browser to create the user interface. So as we are starting to talk about the client side, let’s dig into it a 
bit more in the next section.</p>

<h4 class="is-collected" data-originalid="client-side-frameworks-surf-pages-and-aikau-pages"><a id="client-side-frameworks-surf-pages-and-aikau-pages" data-header="H4" class="is-hidden"></a>Client Side Frameworks (Surf Pages and Aikau Pages)<a class="button" href="#client-side-frameworks-surf-pages-and-aikau-pages"></a></h4>
<p>To get an idea of the differences between the old school Surf pages, and the new Surf pages called Aikau, 
this example implements a simple page in both client side frameworks. The thing that might be a bit confusing to 
start with is that Aikau pages are also old school Surf pages under the hood. An Aikau page actually uses a predefined 
Surf page as a starting point. Start with an old school Hello World page and see how to add it to the Share UI.</p>

<p><strong>Hello World Old School Surf Page</strong></p>

<p>The following steps are needed to add a Surf Page:</p>

<ul>
  <li>Add a Surf Page definition file (XML)</li>
  <li>Add a Template Instance file (XML)</li>
  <li>Add a physical Template file (FTL)</li>
  <li>Add a properties file (.properties) - Optional but good practice</li>
  <li>Add Web Script(s) that fetches content to display (if you have <code>page</code> scoped regions and use an existing template)</li>
</ul>

<p>The full tutorial, and introduction to Surf Pages, can be found (<a href="https://docs.alfresco.com/content-services/latest/develop/share-ext-points/surf-pages/">here</a>).</p>

<p>Next, have a look at how to implement the same Hello World page with Aikau.</p>

<p><strong>Hello World Aikau Page</strong></p>

<p>To implement the Hello World page in Aikau we have to go through the following steps:</p>

<ul>
  <li>Add a Web Script descriptor (XML)</li>
  <li>Add a Web Script template (FTL)</li>
  <li>Add a Web Script controller (JS) with page layout/model</li>
  <li>Add Widget to display content</li>
  <li>Choose what Surf Page you want to use as a basis (dp, hdp, rdp etc)</li>
</ul>

<p>For a full tutorial and introduction to Aikau Pages, see (<a href="https://docs.alfresco.com/content-services/latest/develop/software-architecture/#aikauintro">Introduction to Aikau Pages</a>).</p>

<h4 class="is-collected" data-originalid="surfpageintro"><a id="surfpageintro" data-header="H4" class="is-hidden"></a>Surf Pages introduction<a class="button" href="#surfpageintro"></a></h4>
<p>Use this information for a brief introduction to Spring Surf Pages.</p>

<p>Let’s see how we can implement a Hello World page with the old school Surf Page framework.</p>

<p>The following steps are needed to add a Surf Page:</p>

<ul>
  <li>Add a Surf Page definition file (<code>.xml</code>)</li>
  <li>Add a Template Instance file (<code>.xml</code>)</li>
  <li>Add a physical Template file (<code>.ftl</code>)</li>
  <li>Add a properties file (<code>.properties</code>) - Optional but good practice</li>
  <li>Add Web Script(s) that fetches content to display (if you have <code>page</code> scoped regions and use an existing template)</li>
</ul>

<p>Let’s start out with the page definition file, create a file called <code>helloworldhome.xml</code> in the 
<code>alfresco/tomcat/shared/classes/alfresco/web-extension/site-data/pages</code> directory. You will have to create the 
<code>site-data</code> and <code>pages</code> directories. We are not using a build project to be able to focus solely on Surf.</p>

<p>Add the following XML to the file:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">page</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World Home<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">title-id</span>&gt;</span>page.helloworldhome.title<span class="hljs-tag">&lt;/<span class="hljs-name">title-id</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Hello World Home Description<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">description-id</span>&gt;</span>page.helloworldhome.description<span class="hljs-tag">&lt;/<span class="hljs-name">description-id</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">template-instance</span>&gt;</span>helloworldhome-three-column<span class="hljs-tag">&lt;/<span class="hljs-name">template-instance</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">authentication</span>&gt;</span>none<span class="hljs-tag">&lt;/<span class="hljs-name">authentication</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">page</span>&gt;</span>
</code></pre>

<p>Here we are defining the title and description of the page both hard-coded in the definition, and as references to a 
properties file with labels (i.e. the <code>title-id</code> and <code>description-id</code> elements). The page will not require any 
authentication, which means we cannot fetch any content from the Alfresco Repository from it. It is also going to use 
a three column template, or that is the idea, you can name the template instance whatever you want.</p>

<p>Now create the template instance file called <code>helloworldhome-three-column.xml</code> in the 
<code>alfresco/tomcat/shared/classes/alfresco/web-extension/site-data/template-instances</code> directory. 
You will have to create the template-instances directory:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template-instance</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">template-type</span>&gt;</span>org/alfresco/demo/helloworldhome<span class="hljs-tag">&lt;/<span class="hljs-name">template-type</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template-instance</span>&gt;</span>
</code></pre>

<p>This file just points to where the FreeMarker template for this page will be stored. So create the 
<code>alfresco/tomcat/shared/classes/alfresco/web-extension/templates/org/alfresco/demo</code> directory path. 
Then add the <code>helloworldhome.ftl</code> template file to it:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-text hljs plaintext">This is just a test page. Hello World!
</code></pre>

<p>Continue with the properties file for the page title and description. Create a file called <code>helloworldhome.properties</code> 
in the <code>alfresco/tomcat/shared/classes/alfresco/web-extension/messages</code> directory. 
You will have to create the messages directory:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-text hljs plaintext">page.helloworldhome.title=Hello World 
page.helloworldhome.description=Hello World Home Description
</code></pre>

<p>This file just points to where the FreeMarker template for this page will be stored. We also need to tell 
Alfresco Share about the new resource file, rename the <code>custom-slingshot-application-context.xml.sample</code> 
to <code>custom-slingshot-application-context.xml</code>, it is located in the <code>web-extension</code> directory. 
Then define the following bean:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"org.alfresco.demo.resources"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.extensions.surf.util.ResourceBundleBootstrapComponent"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"resourceBundles"</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>alfresco.web-extension.messages.helloworldhome<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>
     <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>
</code></pre>

<p>To test this page you will have to restart Alfresco. It can then be accessed via the <code>http://localhost:8080/share/page/helloworldhome</code>. 
The page does not look very exciting:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-extensions-share-surf-page-helloworld-noheaderfooter.png" alt="dev-extensions-share-surf-page-helloworld-noheaderfooter"></p>

<p>So we are missing both the Share header and footer, which turns out to be global components that we can easily include. 
We just need to change the template file a bit. Open up the <code>helloworldhome.ftl</code> file and change it so it looks like this:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-name">#include</span> "/<span class="hljs-attr">org</span>/<span class="hljs-attr">alfresco</span>/<span class="hljs-attr">include</span>/<span class="hljs-attr">alfresco-template.ftl</span>" /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">@templateHeader</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">@templateBody</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alf-hd"</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alf-hd"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">@region</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"global"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"share-header"</span> <span class="hljs-attr">chromeless</span>=<span class="hljs-string">"true"</span>/&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bd"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bd"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>This is just a test page. Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">@templateFooter</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alf-ft"</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alf-ft"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">@region</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"footer"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"global"</span> /&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
</code></pre>

<p>What we are doing here is first bringing in another FreeMarker file called <code>alfresco-template.ftl</code> that contains, 
you guessed it, FreeMarker template macros. We then use these macros (elements starting with <code>@</code>) to set up the layout 
of the page with header and footer. The header and footer content is fetched via the <code>share-header</code> and <code>footer</code> global 
scope components (Web Scripts). To view the result of our change we need to restart the server again, after this we 
should see the following:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-extensions-share-surf-page-helloworld-headerfooter.png" alt="dev-extensions-share-surf-page-helloworld-headerfooter"></p>

<p>So that looks a bit better. The next thing we want to do is to make the page a bit more dynamic, currently we have 
hard-coded the content for the page in the template. Let’s add a Web Script that will return the content to display. 
This will require us to update the template with an extra region as follows:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-name">#include</span> "/<span class="hljs-attr">org</span>/<span class="hljs-attr">alfresco</span>/<span class="hljs-attr">include</span>/<span class="hljs-attr">alfresco-template.ftl</span>" /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">@templateHeader</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">@templateBody</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alf-hd"</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alf-hd"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">@region</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"global"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"share-header"</span> <span class="hljs-attr">chromeless</span>=<span class="hljs-string">"true"</span>/&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bd"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bd"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">@region</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"body"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"page"</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">@templateFooter</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">@markup</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alf-ft"</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alf-ft"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">@region</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"footer"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"global"</span> /&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
   <span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">@</span>&gt;</span>
</code></pre>

<p>We have called the new region <code>body</code> and set <code>page</code> scope for it. This requires us to define a new component for this 
region. This can be done either in the page XML, or as a separate file in the <code>site-data/components</code> directory, we will 
do the latter. Create the components directory and add a file called <code>page.body.helloworldhome.xml</code> to it:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>page<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">region-id</span>&gt;</span>body<span class="hljs-tag">&lt;/<span class="hljs-name">region-id</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">source-id</span>&gt;</span>helloworldhome<span class="hljs-tag">&lt;/<span class="hljs-name">source-id</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>/components/helloworld/body<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span>      
</code></pre>

<p>The component file names follow a naming convention: <code>global | template | page&gt;.&lt;region-id&gt;.[&lt;template-instance-id | page-id&gt;].xml</code> 
The URL for this component points to a Web Script that will return the Hello World message. Start implementing it by 
creating a descriptor file called <code>helloworld-body.get.desc.xml</code> located in the 
<code>alfresco/tomcat/shared/classes/alfresco/web-extension/site-webscripts/org/alfresco/demo</code> directory:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-name">webscript</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">shortname</span>&gt;</span>helloworldbody<span class="hljs-tag">&lt;/<span class="hljs-name">shortname</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Returns the body content for the Hello World page.<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>/components/helloworld/body<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">webscript</span>&gt;</span>
</code></pre>

<p>Note that the URL is the same as we set in the component definition. Now implement the controller for the Web Script, 
create a file called <code>helloworld-body.get.js</code> in the same place as the descriptor:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-text hljs plaintext">model.body = "This is just a test page. Hello World! (Web Scripting)";      
</code></pre>

<p>The controller just sets up one field in the model with the Hello World message. Now implement the template for the Web Script, 
create a file called <code>helloworld-body.get.html.ftl</code> in the same place as the descriptor:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>${body}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>      
</code></pre>

<p>Restart the server. Then access the page again, you should see the Hello World message change to 
<em>This is just a test page. Hello World! (Web Scripting)</em>.</p>

<p>To summarize a bit, the following is a picture of all the files that 
were involved in creating this Surf page the old school way:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-extensions-share-surf-page-helloworld-involvedfiles.png" alt="dev-extensions-share-surf-page-helloworld-involvedfiles"></p>

<p>What you could do now is extend the Hello World page with some more sophisticated presentation using the YUI library. 
If you do that you end up with the pattern for how most of the old school Share pages have been implemented.</p>

<p>Next we will have a look at how to implement the same Hello World page the new way with Aikau.</p>

<h4 class="is-collected" data-originalid="aikauintro"><a id="aikauintro" data-header="H4" class="is-hidden"></a>Aikau Pages introduction<a class="button" href="#aikauintro"></a></h4>
<p>Use this information for a brief overview of Aikau Pages.</p>

<p>Let’s see how we can implement a Hello World page with the new Aikau framework.</p>

<p>The following steps are needed to add an Aikau Page:</p>

<ul>
  <li>Add a Web Script descriptor (XML)</li>
  <li>Add a Web Script template (FTL)</li>
  <li>Add a Web Script controller (JS) with page layout/model</li>
  <li>Add Widget to display content</li>
  <li>Choose what Surf Page you want to use as a basis (dp, hdp, rdp etc)</li>
</ul>

<p>OK, this might be a bit confusing, starting with a web script and then selecting a Surf page? If you have read through 
the <a href="#sharearchitecture">Share architecture</a> page then you will remember that an 
Aikau page is based on a predefined Surf Page. So when you implement an Aikau page you are actually bypassing all the 
Site Data model stuff, and you go directly to the Web Script implementation that does the real job of fetching content 
and defining the presentation.</p>

<p>Start implementing the Aikau Page web script by creating a descriptor file called <code>helloworld-aikau.get.desc.xml</code> 
located in the <code>alfresco/tomcat/shared/classes/alfresco/web-extension/site-webscripts/org/alfresco/demo</code> directory:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-name">webscript</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">shortname</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">shortname</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Hello World page definition<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Share<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>/helloworld<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">webscript</span>&gt;</span>
</code></pre>

<p>Now implement the controller for the Web Script, create a file called <code>helloworld-aikau.get.js</code> in the same place as the descriptor:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-javascript hljs">model.jsonModel = {
    <span class="hljs-attr">widgets</span>: [
        {
            <span class="hljs-attr">id</span>: <span class="hljs-string">"SET_PAGE_TITLE"</span>,
            <span class="hljs-attr">name</span>: <span class="hljs-string">"alfresco/header/SetTitle"</span>,
            <span class="hljs-attr">config</span>: {
                <span class="hljs-attr">title</span>: <span class="hljs-string">"Hello World"</span>
            }
        },
        {
            <span class="hljs-attr">id</span>: <span class="hljs-string">"DEMO_SIMPLE_MSG"</span>,
            <span class="hljs-attr">name</span>: <span class="hljs-string">"example/widgets/HelloWorldTextWidget"</span>
        }
    ]
};      
</code></pre>

<p>The controller is where the main work is done when it comes to implementing the layout of the page. If you do not need 
any custom widgets then it might even be the only major thing you need to implement to get the Aikau page up and running. 
Now implement the template for the web script, create a file called <code>helloworld-aikau.get.html.ftl</code> in the same place 
as the descriptor:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-name">@processJsonModel</span> /&gt;</span>
</code></pre>

<p>The template just kicks off the <code>processJsonModel</code> FreeMarker template macro, which will, as it says, process the JSON 
model and assemble the page components.</p>

<p>Our page model contains an example widget that we need to implement. It is specified to be at the <code>example/widgets</code> 
package path. Dojo is the JavaScript framework used behind the scenes, and we need to tell it about the new package path. 
This can be done via a Spring Surf Module extension. Create a file called <code>example-widgets.xml</code> and put it in the 
<code>alfresco/tomcat/shared/classes/alfresco/web-extension/site-data/extensions</code> directory:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-name">extension</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>Example Aikau Widgets<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">auto-deploy</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">auto-deploy</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">configurations</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">config</span> <span class="hljs-attr">evaluator</span>=<span class="hljs-string">"string-compare"</span> <span class="hljs-attr">condition</span>=<span class="hljs-string">"WebFramework"</span> <span class="hljs-attr">replace</span>=<span class="hljs-string">"false"</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">web-framework</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">dojo-pages</span>&gt;</span>
              <span class="hljs-tag">&lt;<span class="hljs-name">packages</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"example"</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"js/example"</span>/&gt;</span>
              <span class="hljs-tag">&lt;/<span class="hljs-name">packages</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">dojo-pages</span>&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-name">web-framework</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">config</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">configurations</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">extension</span>&gt;</span>      
</code></pre>

<p>Now we can start implementing the Aikau Widget that should return the Hello World message. To do that we need to 
implement a new Dojo JavaScript class called <code>HelloWorldTextWidget</code>. The widget is pure client side resource stuff so 
we need to add the files involved into the exploded Share web app (this is just because we are not using a build project). 
Create a file called <code>HelloWorldTextWidget.js</code> and put it in the <code>alfresco/tomcat/webapps/share/js/example/widgets</code> directory:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-javascript hljs">define([<span class="hljs-string">"dojo/_base/declare"</span>,
        <span class="hljs-string">"dijit/_WidgetBase"</span>,
        <span class="hljs-string">"alfresco/core/Core"</span>,
        <span class="hljs-string">"dijit/_TemplatedMixin"</span>,
        <span class="hljs-string">"dojo/text!./HelloWorldTextWidget.html"</span>
    ],
    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">declare, _Widget, Core, _Templated, template</span>) </span>{
        <span class="hljs-keyword">return</span> declare([_Widget, Core, _Templated], {
            <span class="hljs-attr">templateString</span>: template,
            <span class="hljs-attr">i18nRequirements</span>: [ {<span class="hljs-attr">i18nFile</span>: <span class="hljs-string">"./HelloWorldTextWidget.properties"</span>} ],
            <span class="hljs-attr">cssRequirements</span>: [{<span class="hljs-attr">cssFile</span>:<span class="hljs-string">"./HelloWorldTextWidget.css"</span>}],
            
            <span class="hljs-attr">buildRendering</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">example_widgets_HelloWorldTextWidget__buildRendering</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-built_in">this</span>.helloWorldMsg = <span class="hljs-built_in">this</span>.message(<span class="hljs-string">'hello.world'</span>);
                <span class="hljs-built_in">this</span>.inherited(<span class="hljs-built_in">arguments</span>);

            }
        });
});      
</code></pre>

<p>This widget is based on an HTML template defined in a file called <code>HelloWorldTextWidget.html</code>, create this file in the 
same place as the Widget class:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"helloWorldMsgStyle"</span>&gt;</span>${helloWorldMsg}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>

<p>The widget also uses a property called <code>hello.world</code> that needs to be available in a resource file called 
<code>HelloWorldTextWidget.properties</code>, create it in the same place as the Widget class:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-text hljs plaintext">hello.world=This is just a test page. Hello World! (Aikau)      
</code></pre>

<p>Finally the widget template uses a CSS style called <code>helloWorldMsgStyle</code> that needs to be available in a resource file 
called <code>HelloWorldTextWidget.css</code>, create it in the same place as the Widget class:</p>

<pre><div class="copy-pane"><button class="button"><alfresco-tooltip class="tooltip" data-tooltip-mode="manual" data-tooltip-text="Code copied to clipboard."><div><span class="icon is-small"><i class="copy-icon"></i></span></div><div class="tooltip-dropdown" style="transform: translate(0px, calc(-50% - 13.3333px));">Code copied to clipboard.</div></alfresco-tooltip></button></div><code class="language-text hljs plaintext">.helloWorldMsgStyle {
    border: 1px #000000 solid;
    padding: 1em;
    width: 100px;
    background-color:lightgrey;
}      
</code></pre>

<p>Now restart Content Services and then access the page with the <code>http://localhost:8080/share/page/hdp/ws/helloworld</code> URL. 
You should see the following page in Share:</p>

<p><img src="Alfresco%20Docs%20-%20Software%20Architecture_files/dev-extensions-share-surf-page-helloworld-aikau.png" alt="dev-extensions-share-surf-page-helloworld-aikau"></p>

<p>The page we choose as a basis (that is, the Hybrid Dynamic Surf Page - <code>hdp</code>) provides both the header and the footer 
for the Share web application. If you want to see the page stand-alone you can use the <code>dp</code> page as a basis.</p>

<p>So when we are working with Aikau pages we do not have to bother about the Site Data model and all the different kinds 
of XML files. We just create a web script where the controller will contain the complete layout of the page. And then 
the page content will go into an auto-generated region on the Surf page we select.</p>

<h4 class="is-collected" data-originalid="surf-framework-introduction"><a id="surf-framework-introduction" data-header="H4" class="is-hidden"></a>Surf Framework introduction<a class="button" href="#surf-framework-introduction"></a></h4>
<p>Surf lets you build user interfaces for web applications using server-side scripts and templates without Java coding, 
recompilation, or server restarts. Surf follows a content-driven approach, where scripts and templates are simple files 
on disk so that you can make changes to a live site in a text editor.</p>

<p>Surf is a Spring framework extension for building new Spring framework applications or plugging into existing 
Spring web MVC (Model, View, Controller) applications. Spring Web MVC provides separation between the application Model, 
View, and Controller (known as <em>MVC</em>). You can use Surf with other popular Spring Web MVC technologies including Tiles, 
Grails, and Web Flow.</p>

<p>Surf’s object model lets you define pages, templates, components, and themes using XML. The Spring application picks up 
new files and processes them through scripts and templates to produce the view, and writes scripts using server-side 
JavaScript and Groovy. Templates are written using FreeMarker. You can build both page-centric and content-centric 
websites using Surf, and it provides out-of-the-box support for rendering content delivered through content delivery 
services, such as CMIS, Atom, and RSS.</p>

<blockquote>
  <p><strong>Note:</strong> The Groovy <code>invokedynamic</code> <code>indy</code>
 library is included in Content Services. Depending on the JVM version, 
you can target close to Java performance for dynamic Groovy with <code>invokedynamic</code> support activated.</p>
</blockquote>

<p><strong>Features:</strong></p>

<ul>
  <li><strong>Scripts and templates</strong>: Everything in Surf consists of scripts, templates, or configuration. This means no server restarts or compilation.</li>
  <li><strong>Reusability</strong>: Surf’s presentation objects, 
templates, and scripts emphasize reusability. Scoped regions and 
component bindings allow you to describe presentation with less code.</li>
  <li><strong>Spring Web MVC</strong>: Surf plugs in as a view resolver 
for Spring Web MVC, enabling you to use Surf for all or part of a site’s
 view resolution. Surf renders views on top of annotated controllers and
 is plug-compatible with Spring Web Flow, Spring Security, Spring Roo, 
and Spring tag libraries.</li>
  <li><strong>RESTful scripts and templates</strong>: All page elements 
and remote interfaces are delivered through a RESTful API. The full 
feature set of web scripts is available to Surf applications. Write new 
remote interfaces or new portlets with a script, a template, and a 
configuration file.</li>
  <li><strong>Content management</strong>: A set of client libraries and
 out-of-the-box components streamline interoperability with CMIS content
 management systems, letting you easily access and present Enterprise 
content using Surf components and templates.</li>
  <li><strong>Two-tier architecture</strong>: Surf works in a decoupled architecture where the presentation tier is separate from the content services tier.</li>
  <li><strong>Production, development, and staging/preview</strong>: Configure Surf to work in a number of deployment scenarios including development, preview, or production environments.</li>
  <li><strong>Development tools</strong>: Tools that plug into the 
SpringSource suite of development tools include Eclipse add-ons for 
SpringSource Tool Suite, as well as Spring Roo plug-ins to enable 
scaffolding and script-driven site generation.</li>
</ul>

<h2 class="is-collected" data-originalid="apis"><a id="apis" data-header="H2" class="is-hidden"></a>APIs<a class="button" href="#apis"></a></h2>
<p>To access and extend out-of-the-box services, the content application server exposes two flavors of API, each designed 
for a specific type of client.</p>

<p>The two main categories of API that are available to use when interacting with the Alfresco Repository is the remote 
and the embedded APIs.</p>

<h3 class="is-collected" data-originalid="remote-apis"><a id="remote-apis" data-header="H3" class="is-hidden"></a>Remote APIs<a class="button" href="#remote-apis"></a></h3>
<p>The main remote Application Programming Interface (API) is the <a href="https://docs.alfresco.com/content-services/latest/develop/rest-api-guide/">Alfresco ReST API</a>,
which should be the first place you go to when you want to interact with the Alfresco Repository remotely. 
If portability is very important, than have a look at the CMIS ReST API,
which is a standard implemented by many ECM vendors.</p>

<h3 class="is-collected" data-originalid="embedded-apis"><a id="embedded-apis" data-header="H3" class="is-hidden"></a>Embedded APIs<a class="button" href="#embedded-apis"></a></h3>
<p>The embedded APIs have traditionally been used a lot to build customizations that run inside the same JVM as the 
Alfresco Repository. There are both a <a href="https://docs.alfresco.com/content-services/latest/develop/reference/java-foundation-ref/">Public Java API</a> and a Repository JavaScript API.
Before using the embedded APIs a thorough investigation should be done to rule out the possibility of building the extension 
with a remote API. It is not recommended to build embedded extensions unless it is absolutely necessary.
They make it difficult during upgrades and can quite easily have unintended side effects on core repository functionality, 
such as file upload.</p>

              </article>
            </div>

<!-- Hide page rating 

            <div class="columns content-rating" data-toggled="none">
              <div class="column">
                <h1>Was this page helpful?</h1>
                <div class="field is-grouped">
                  <div class="control">
                    <button class="button" id="thumb-up">
                      <span class="icon is-small"></span>
                    </button>
                  </div>
                  <div class="control">
                    <button class="button" id="thumb-down">
                      <span class="icon is-small"></span>
                    </button>
                  </div>
                </div>
                
                <form action="#">
                  <div class="thumb-up-controls">
                    <p>We’re glad this article helped!</p>
                    <textarea placeholder="Anything else you'd like us to know?" name="positive"></textarea>
                  </div>
                  <div class="thumb-down-controls">
                    <p>Share your thoughts!</p>
                    <textarea placeholder="Please, help us to become better for you!" name="negative"></textarea>
                  </div>
                  <div class="control">
                    <button class="button is-primary" type="submit">Submit</button>
                  </div>
                </form>
              </div>
-->

              <div class="column">
                <h1>Edit this page</h1>
                <a href="https://github.com/Alfresco/docs-alfresco/edit/master/content-services/latest/develop/software-architecture.md" target="_blank" class="github-link">Suggest an edit on GitHub</a>
              </div>
            </div>
          </div>

        </div>
      
    </section>
    <section class="section has-background-light footer-container">
      <footer class="footer container">
        <div class="columns links">
          <div class="column">
            <p><b>Additional resources</b></p>
            <ul>
              <li><a href="https://hub.alfresco.com/" target="_blank">Alfresco Forums</a></li>
              <li><a href="https://university.alfresco.com/" target="_blank">Alfresco University</a></li>
              <li><a href="https://github.com/Alfresco/docs-alfresco/tree/master/_archive/" target="_blank">Legacy Documentation</a></li>
            </ul>
          </div>
          <div class="column">
            <p><b>Support resources</b></p>
            <ul>
                <li><a href="https://docs.alfresco.com/support/latest/" target="_blank">Support Handbook</a></li>
                <li><a href="https://support.alfresco.com/" target="_blank">Customer Support Portal</a></li>
            </ul>
          </div>
        </div>
        <div class="columns copyright">
          <div class="column">
            <small>© 2023 Hyland Software, Inc. and its affiliates. All 
rights reserved. All Hyland product names are registered or unregistered
 trademarks of Hyland Software, Inc. or its affiliates in the United 
States and other countries.</small>
          </div>
          <div class="column extra-links">
            <a href="https://www.alfresco.com/terms-use" target="_blank">Terms of Use</a>
            <a href="https://www.alfresco.com/cookie-statement" target="_blank">Cookies</a>
            <a href="https://www.alfresco.com/privacy-statement" target="_blank">Privacy</a>
            <a href="https://www.alfresco.com/legal/ccpa" target="_blank">CCPA</a>
            <a href="https://docs.alfresco.com/documentation-notice/" target="_blank">Documentation Notice</a>
          </div>
        </div>
      </footer>
    </section>  
    <div class="notif-box">
      <div id="cookies-notif" class="notif"><span>This website uses <a href="https://www.alfresco.com/cookie-statement" target="_blank">cookies</a>
 in order to offer you the most relevant information. Please accept 
cookies for optimal performance. This documentation is subject to the <a href="https://docs.alfresco.com/documentation-notice/">Documentation Notice</a>.</span><button>Accept cookies</button></div>
    </div>
<script src="Alfresco%20Docs%20-%20Software%20Architecture_files/init.js"></script>



  

</body></html>