PREFIX : <http://stardog.com/tutorial/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

:The_Beatles      rdf:type  :Band .
:The_Beatles      :name     "The Beatles" .
:The_Beatles      :member   :John_Lennon .
:The_Beatles      :member   :Paul_McCartney .
:The_Beatles      :member   :Ringo_Starr .
:The_Beatles      :member   :George_Harrison .
:John_Lennon      rdf:type  :SoloArtist .
:Paul_McCartney   rdf:type  :SoloArtist .
:Ringo_Starr      rdf:type  :SoloArtist .
:George_Harrison  rdf:type  :SoloArtist .
:Please_Please_Me rdf:type  :Album .
:Please_Please_Me :name     "Please Please Me" .
:Please_Please_Me :date     "1963-03-22"^^xsd:date .
:Please_Please_Me :artist   :The_Beatles .
:Please_Please_Me :track    :Love_Me_Do .
:Love_Me_Do       rdf:type  :Song .
:Love_Me_Do       :name     "Love Me Do" .
:Love_Me_Do       :length   125 .
:Love_Me_Do       :writer   :John_Lennon .
:Love_Me_Do       :writer   :Paul_McCartney .

There are two main concepts in RDFS: Class and Property.
Classes represent categories of nodes with similar characteristics. Nodes that belong to this category are linked to the class using the rdf:type (short hand: a) property. Classes themselves are identified by the meta-class rdfs:Class.
:Band a rdfs:Class .        # declaration of a class
:The_Beatles a :Band .      # declaring an instance of a class 
Since classes are declared in the same way as data, syntactically, schemas are part of the graph data and can be queried with all the same tools and mechanisms. This also means that unlike other data models the distinction between ‘data’ and ‘metadata’ is quite fluid and informal in RDF. In the real world the difference between these is always relative to some particular use case or requirement, that is, it’s not a very rigid or universal distinction.

Classes
Classes can be organized in a hierarchy by relating them to each other via rdfs:subClassOf. For example, it is reasonable to define a generic superclass Artist for the more specific Band and SoloArtist classes we have used so far:

:Artist a rdfs:Class .
:Band rdfs:subClassOf :Artist .
:SoloArtist rdfs:subClassOf :Artist .

Properties

Property is a relation between subjects and objects. We have already seen many examples of properties; :album, for example. We can use the rdf:Property class to declare properties:

:track a rdf:Property .
:length a rdf:Property .

One unique feature of the RDF data model is that a class is not defined in terms of the properties its instance may have. Rather, properties are defined in terms of the kind of subjects and objects they relate. This is done via domain and range definitions:

:track a rdf:Property ;
       rdfs:domain :Album ;
       rdfs:range  :Song .

:length a rdf:Property ;
       rdfs:domain :Song ;
       rdfs:range xsd:integer .

The range of the track property is defined to be a Song class, so the objects should be resources that are instances of this class. The range of the length property, on the other hand, is defined to be the built-in datatype xsd:integer so the objects should be integer literals. The domain declaration should always be a class as it defines the types of subjects used with the property and subjects can’t be literals.

Even though RDFS allows one to define domain and range declarations for properties, there is no builtin concept of validation similar to other schema languages like XML Schema. That is, it would be legal in RDFS, though nonsensical in practice, to use the track property to link an album to another album.

But of course data quality matters a lot and so Stardog allows a data validation capability to actually enforce such constraints.

Metadata

RDFS also provides two properties that can be used to provide metadata about nodes, classes, and properties:

    rdfs:label: provides a human-readable name for a resource
    rdfs:comment: provides a human-readable description of a resource

:length rdfs:label "length (in seconds)" ;
        rdfs:comment "The length of a song expressed in seconds".

Using these RDFS properties for human-readable names and descriptions is considered a good practice but this is not a requirement. For example, in our example above, we used the :name property instead of rdfs:label for human readable names. But since these RDFS properties are well-established, widely used in many RDF datasets and has special support in UIs there is no good reason to invent new properties for the same purpose either.

# ===================================

:Artist :description "This is the graph that contains information about artists including bands" .

GRAPH :Artist {
   :The_Beatles a :Band ;
             :name "The Beatles" ;
             :member :John_Lennon , :Paul_McCartney , :George_Harrison , :Ringo_Starr .

   :John_Lennon      rdf:type  :SoloArtist .
   :Paul_McCartney   rdf:type  :SoloArtist .
   :Ringo_Starr      rdf:type  :SoloArtist .
   :George_Harrison  rdf:type  :SoloArtist .
}

:Album :description "This is the graph that contains information about albums" .

GRAPH :Album {
  :Please_Please_Me rdf:type :Album ;
                  :name "Please Please Me" ;
                  :date "1963-03-22"^^xsd:date ;
                  :artist :The_Beatles ;
                  :track :Love_Me_Do .
}

:Song :description "This is the graph that contains information about individual songs" .

GRAPH :Song {
  :Love_Me_Do rdf:type :Song ;
            :name "Love Me Do" ;
            :length 125 .
}
